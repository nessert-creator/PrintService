"use strict";
/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Web
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
exports.__esModule = true;
var url_1 = require("url");
var portableFetch = fetch;
//const BASE_PATH = "http://220.165.143.73:666".replace(/\/+$/, "");
var BASE_PATH = location.host.indexOf('localhost') >= 0 || location.host.indexOf('127.0.0.1') >= 0
    ? (location.protocol + "//" + location.host + "/api").replace(/\/+$/, '')
    : (location.protocol + "//" + location.host).replace(/\/+$/, '');
/**
 *
 * @export
 */
exports.COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|"
};
/**
 *
 * @export
 * @class BaseAPI
 */
var BaseAPI = /** @class */ (function () {
    function BaseAPI(configuration, basePath, fetch) {
        if (basePath === void 0) { basePath = BASE_PATH; }
        if (fetch === void 0) { fetch = portableFetch; }
        this.basePath = basePath;
        this.fetch = fetch;
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
    return BaseAPI;
}());
exports.BaseAPI = BaseAPI;
;
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
var RequiredError = /** @class */ (function (_super) {
    __extends(RequiredError, _super);
    function RequiredError(field, msg) {
        var _this = _super.call(this, msg) || this;
        _this.field = field;
        return _this;
    }
    return RequiredError;
}(Error));
exports.RequiredError = RequiredError;
/**
 * @export
 * @namespace ChatMessageDto
 */
var ChatMessageDto;
(function (ChatMessageDto) {
    /**
     * @export
     * @enum {string}
     */
    var SideEnum;
    (function (SideEnum) {
        SideEnum[SideEnum["NUMBER_1"] = 1] = "NUMBER_1";
        SideEnum[SideEnum["NUMBER_2"] = 2] = "NUMBER_2";
    })(SideEnum = ChatMessageDto.SideEnum || (ChatMessageDto.SideEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var ReadStateEnum;
    (function (ReadStateEnum) {
        ReadStateEnum[ReadStateEnum["NUMBER_1"] = 1] = "NUMBER_1";
        ReadStateEnum[ReadStateEnum["NUMBER_2"] = 2] = "NUMBER_2";
    })(ReadStateEnum = ChatMessageDto.ReadStateEnum || (ChatMessageDto.ReadStateEnum = {}));
})(ChatMessageDto = exports.ChatMessageDto || (exports.ChatMessageDto = {}));
/**
 * @export
 * @namespace CreateAppStartPageDto
 */
var CreateAppStartPageDto;
(function (CreateAppStartPageDto) {
    /**
     * @export
     * @enum {string}
     */
    var PlatformEnum;
    (function (PlatformEnum) {
        PlatformEnum[PlatformEnum["NUMBER_1"] = 1] = "NUMBER_1";
        PlatformEnum[PlatformEnum["NUMBER_2"] = 2] = "NUMBER_2";
    })(PlatformEnum = CreateAppStartPageDto.PlatformEnum || (CreateAppStartPageDto.PlatformEnum = {}));
})(CreateAppStartPageDto = exports.CreateAppStartPageDto || (exports.CreateAppStartPageDto = {}));
/**
 * @export
 * @namespace FriendDto
 */
var FriendDto;
(function (FriendDto) {
    /**
     * @export
     * @enum {string}
     */
    var StateEnum;
    (function (StateEnum) {
        StateEnum[StateEnum["NUMBER_1"] = 1] = "NUMBER_1";
        StateEnum[StateEnum["NUMBER_2"] = 2] = "NUMBER_2";
    })(StateEnum = FriendDto.StateEnum || (FriendDto.StateEnum = {}));
})(FriendDto = exports.FriendDto || (exports.FriendDto = {}));
/**
 * @export
 * @namespace GetAppEditionsInput
 */
var GetAppEditionsInput;
(function (GetAppEditionsInput) {
    /**
     * @export
     * @enum {string}
     */
    var AppSearchTypeEnum;
    (function (AppSearchTypeEnum) {
        AppSearchTypeEnum[AppSearchTypeEnum["NUMBER_0"] = 0] = "NUMBER_0";
        AppSearchTypeEnum[AppSearchTypeEnum["NUMBER_1"] = 1] = "NUMBER_1";
        AppSearchTypeEnum[AppSearchTypeEnum["NUMBER_2"] = 2] = "NUMBER_2";
    })(AppSearchTypeEnum = GetAppEditionsInput.AppSearchTypeEnum || (GetAppEditionsInput.AppSearchTypeEnum = {}));
})(GetAppEditionsInput = exports.GetAppEditionsInput || (exports.GetAppEditionsInput = {}));
/**
 * @export
 * @namespace GetAppStartPageDto
 */
var GetAppStartPageDto;
(function (GetAppStartPageDto) {
    /**
     * @export
     * @enum {string}
     */
    var PlatformEnum;
    (function (PlatformEnum) {
        PlatformEnum[PlatformEnum["NUMBER_1"] = 1] = "NUMBER_1";
        PlatformEnum[PlatformEnum["NUMBER_2"] = 2] = "NUMBER_2";
    })(PlatformEnum = GetAppStartPageDto.PlatformEnum || (GetAppStartPageDto.PlatformEnum = {}));
})(GetAppStartPageDto = exports.GetAppStartPageDto || (exports.GetAppStartPageDto = {}));
/**
 * @export
 * @namespace GetAppStartPageInput
 */
var GetAppStartPageInput;
(function (GetAppStartPageInput) {
    /**
     * @export
     * @enum {string}
     */
    var PlatformEnum;
    (function (PlatformEnum) {
        PlatformEnum[PlatformEnum["NUMBER_1"] = 1] = "NUMBER_1";
        PlatformEnum[PlatformEnum["NUMBER_2"] = 2] = "NUMBER_2";
    })(PlatformEnum = GetAppStartPageInput.PlatformEnum || (GetAppStartPageInput.PlatformEnum = {}));
})(GetAppStartPageInput = exports.GetAppStartPageInput || (exports.GetAppStartPageInput = {}));
/**
 * @export
 * @namespace GetListAppStartPageDto
 */
var GetListAppStartPageDto;
(function (GetListAppStartPageDto) {
    /**
     * @export
     * @enum {string}
     */
    var PlatformEnum;
    (function (PlatformEnum) {
        PlatformEnum[PlatformEnum["NUMBER_1"] = 1] = "NUMBER_1";
        PlatformEnum[PlatformEnum["NUMBER_2"] = 2] = "NUMBER_2";
    })(PlatformEnum = GetListAppStartPageDto.PlatformEnum || (GetListAppStartPageDto.PlatformEnum = {}));
})(GetListAppStartPageDto = exports.GetListAppStartPageDto || (exports.GetListAppStartPageDto = {}));
/**
 * @export
 * @namespace GetUserNotificationsInput
 */
var GetUserNotificationsInput;
(function (GetUserNotificationsInput) {
    /**
     * @export
     * @enum {string}
     */
    var StateEnum;
    (function (StateEnum) {
        StateEnum[StateEnum["NUMBER_0"] = 0] = "NUMBER_0";
        StateEnum[StateEnum["NUMBER_1"] = 1] = "NUMBER_1";
    })(StateEnum = GetUserNotificationsInput.StateEnum || (GetUserNotificationsInput.StateEnum = {}));
})(GetUserNotificationsInput = exports.GetUserNotificationsInput || (exports.GetUserNotificationsInput = {}));
/**
 * @export
 * @namespace IsTenantAvailableOutput
 */
var IsTenantAvailableOutput;
(function (IsTenantAvailableOutput) {
    /**
     * @export
     * @enum {string}
     */
    var StateEnum;
    (function (StateEnum) {
        StateEnum[StateEnum["NUMBER_1"] = 1] = "NUMBER_1";
        StateEnum[StateEnum["NUMBER_2"] = 2] = "NUMBER_2";
        StateEnum[StateEnum["NUMBER_3"] = 3] = "NUMBER_3";
    })(StateEnum = IsTenantAvailableOutput.StateEnum || (IsTenantAvailableOutput.StateEnum = {}));
})(IsTenantAvailableOutput = exports.IsTenantAvailableOutput || (exports.IsTenantAvailableOutput = {}));
/**
 * @export
 * @namespace IsUpatedInput
 */
var IsUpatedInput;
(function (IsUpatedInput) {
    /**
     * @export
     * @enum {string}
     */
    var PlatformEnum;
    (function (PlatformEnum) {
        PlatformEnum[PlatformEnum["NUMBER_1"] = 1] = "NUMBER_1";
        PlatformEnum[PlatformEnum["NUMBER_2"] = 2] = "NUMBER_2";
    })(PlatformEnum = IsUpatedInput.PlatformEnum || (IsUpatedInput.PlatformEnum = {}));
})(IsUpatedInput = exports.IsUpatedInput || (exports.IsUpatedInput = {}));
/**
 * @export
 * @namespace TenantNotification
 */
var TenantNotification;
(function (TenantNotification) {
    /**
     * @export
     * @enum {string}
     */
    var SeverityEnum;
    (function (SeverityEnum) {
        SeverityEnum[SeverityEnum["NUMBER_0"] = 0] = "NUMBER_0";
        SeverityEnum[SeverityEnum["NUMBER_1"] = 1] = "NUMBER_1";
        SeverityEnum[SeverityEnum["NUMBER_2"] = 2] = "NUMBER_2";
        SeverityEnum[SeverityEnum["NUMBER_3"] = 3] = "NUMBER_3";
        SeverityEnum[SeverityEnum["NUMBER_4"] = 4] = "NUMBER_4";
    })(SeverityEnum = TenantNotification.SeverityEnum || (TenantNotification.SeverityEnum = {}));
})(TenantNotification = exports.TenantNotification || (exports.TenantNotification = {}));
/**
 * @export
 * @namespace ThirdPartyLoginModel
 */
var ThirdPartyLoginModel;
(function (ThirdPartyLoginModel) {
    /**
     * @export
     * @enum {string}
     */
    var ThirdPartyEnum;
    (function (ThirdPartyEnum) {
        ThirdPartyEnum[ThirdPartyEnum["NUMBER_1"] = 1] = "NUMBER_1";
        ThirdPartyEnum[ThirdPartyEnum["NUMBER_2"] = 2] = "NUMBER_2";
        ThirdPartyEnum[ThirdPartyEnum["NUMBER_3"] = 3] = "NUMBER_3";
        ThirdPartyEnum[ThirdPartyEnum["NUMBER_4"] = 4] = "NUMBER_4";
    })(ThirdPartyEnum = ThirdPartyLoginModel.ThirdPartyEnum || (ThirdPartyLoginModel.ThirdPartyEnum = {}));
})(ThirdPartyLoginModel = exports.ThirdPartyLoginModel || (exports.ThirdPartyLoginModel = {}));
/**
 * @export
 * @namespace UpdateAppStartPageDto
 */
var UpdateAppStartPageDto;
(function (UpdateAppStartPageDto) {
    /**
     * @export
     * @enum {string}
     */
    var PlatformEnum;
    (function (PlatformEnum) {
        PlatformEnum[PlatformEnum["NUMBER_1"] = 1] = "NUMBER_1";
        PlatformEnum[PlatformEnum["NUMBER_2"] = 2] = "NUMBER_2";
    })(PlatformEnum = UpdateAppStartPageDto.PlatformEnum || (UpdateAppStartPageDto.PlatformEnum = {}));
})(UpdateAppStartPageDto = exports.UpdateAppStartPageDto || (exports.UpdateAppStartPageDto = {}));
/**
 * @export
 * @namespace UserNotification
 */
var UserNotification;
(function (UserNotification) {
    /**
     * @export
     * @enum {string}
     */
    var StateEnum;
    (function (StateEnum) {
        StateEnum[StateEnum["NUMBER_0"] = 0] = "NUMBER_0";
        StateEnum[StateEnum["NUMBER_1"] = 1] = "NUMBER_1";
    })(StateEnum = UserNotification.StateEnum || (UserNotification.StateEnum = {}));
})(UserNotification = exports.UserNotification || (exports.UserNotification = {}));
/**
 * AbpCacheApi - fetch parameter creator
 * @export
 */
exports.AbpCacheApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {ClearCacheModel} model
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abpCacheClear: function (model, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'model' is not null or undefined
            if (model === null || model === undefined) {
                throw new RequiredError('model', 'Required parameter model was null or undefined when calling abpCacheClear.');
            }
            var localVarPath = "/api/AbpCache/Clear";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ClearCacheModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(model || {}) : (model || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {ClearAllCacheModel} model
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abpCacheClearAll: function (model, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'model' is not null or undefined
            if (model === null || model === undefined) {
                throw new RequiredError('model', 'Required parameter model was null or undefined when calling abpCacheClearAll.');
            }
            var localVarPath = "/api/AbpCache/ClearAll";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ClearAllCacheModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(model || {}) : (model || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * AbpCacheApi - functional programming interface
 * @export
 */
exports.AbpCacheApiFp = function (configuration) {
    return {
        /**
         *
         * @param {ClearCacheModel} model
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abpCacheClear: function (model, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.AbpCacheApiFetchParamCreator(configuration).abpCacheClear(model, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {ClearAllCacheModel} model
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abpCacheClearAll: function (model, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.AbpCacheApiFetchParamCreator(configuration).abpCacheClearAll(model, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        }
    };
};
/**
 * AbpCacheApi - factory interface
 * @export
 */
exports.AbpCacheApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @param {ClearCacheModel} model
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abpCacheClear: function (model, X_XSRF_TOKEN, authorization, options) {
            return exports.AbpCacheApiFp(configuration).abpCacheClear(model, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {ClearAllCacheModel} model
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abpCacheClearAll: function (model, X_XSRF_TOKEN, authorization, options) {
            return exports.AbpCacheApiFp(configuration).abpCacheClearAll(model, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        }
    };
};
/**
 * AbpCacheApi - object-oriented interface
 * @export
 * @class AbpCacheApi
 * @extends {BaseAPI}
 */
var AbpCacheApi = /** @class */ (function (_super) {
    __extends(AbpCacheApi, _super);
    function AbpCacheApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {ClearCacheModel} model
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AbpCacheApi
     */
    AbpCacheApi.prototype.abpCacheClear = function (model, X_XSRF_TOKEN, authorization, options) {
        return exports.AbpCacheApiFp(this.configuration).abpCacheClear(model, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {ClearAllCacheModel} model
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AbpCacheApi
     */
    AbpCacheApi.prototype.abpCacheClearAll = function (model, X_XSRF_TOKEN, authorization, options) {
        return exports.AbpCacheApiFp(this.configuration).abpCacheClearAll(model, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    return AbpCacheApi;
}(BaseAPI));
exports.AbpCacheApi = AbpCacheApi;
/**
 * AbpServiceProxiesApi - fetch parameter creator
 * @export
 */
exports.AbpServiceProxiesApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {string} name
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {0 | 1} [type]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abpServiceProxiesGet: function (name, X_XSRF_TOKEN, authorization, type, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name', 'Required parameter name was null or undefined when calling abpServiceProxiesGet.');
            }
            var localVarPath = "/api/AbpServiceProxies";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }
            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * AbpServiceProxiesApi - functional programming interface
 * @export
 */
exports.AbpServiceProxiesApiFp = function (configuration) {
    return {
        /**
         *
         * @param {string} name
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {0 | 1} [type]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abpServiceProxiesGet: function (name, X_XSRF_TOKEN, authorization, type, options) {
            var localVarFetchArgs = exports.AbpServiceProxiesApiFetchParamCreator(configuration).abpServiceProxiesGet(name, X_XSRF_TOKEN, authorization, type, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        }
    };
};
/**
 * AbpServiceProxiesApi - factory interface
 * @export
 */
exports.AbpServiceProxiesApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @param {string} name
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {0 | 1} [type]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abpServiceProxiesGet: function (name, X_XSRF_TOKEN, authorization, type, options) {
            return exports.AbpServiceProxiesApiFp(configuration).abpServiceProxiesGet(name, X_XSRF_TOKEN, authorization, type, options)(fetch, basePath);
        }
    };
};
/**
 * AbpServiceProxiesApi - object-oriented interface
 * @export
 * @class AbpServiceProxiesApi
 * @extends {BaseAPI}
 */
var AbpServiceProxiesApi = /** @class */ (function (_super) {
    __extends(AbpServiceProxiesApi, _super);
    function AbpServiceProxiesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} name
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {0 | 1} [type]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AbpServiceProxiesApi
     */
    AbpServiceProxiesApi.prototype.abpServiceProxiesGet = function (name, X_XSRF_TOKEN, authorization, type, options) {
        return exports.AbpServiceProxiesApiFp(this.configuration).abpServiceProxiesGet(name, X_XSRF_TOKEN, authorization, type, options)(this.fetch, this.basePath);
    };
    return AbpServiceProxiesApi;
}(BaseAPI));
exports.AbpServiceProxiesApi = AbpServiceProxiesApi;
/**
 * AccountApi - fetch parameter creator
 * @export
 */
exports.AccountApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary 登录认证
         * @param {LoginModel} loginModel
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountAuthenticate: function (loginModel, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'loginModel' is not null or undefined
            if (loginModel === null || loginModel === undefined) {
                throw new RequiredError('loginModel', 'Required parameter loginModel was null or undefined when calling accountAuthenticate.');
            }
            var localVarPath = "/api/Account";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("LoginModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(loginModel || {}) : (loginModel || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 绑定账号  （无调用）
         * @param {BindingThirdPartyInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAccountBindingThirdParty: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appAccountBindingThirdParty.');
            }
            var localVarPath = "/api/services/app/account/BindingThirdParty";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("BindingThirdPartyInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 租户是否可用  （无调用）
         * @param {IsTenantAvailableInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAccountIsTenantAvailable: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appAccountIsTenantAvailable.');
            }
            var localVarPath = "/api/services/app/account/IsTenantAvailable";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("IsTenantAvailableInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 登录时发送手机证码
         * @param {PhoneWithCaptchaInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAccountSendPhoneNumberCode: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appAccountSendPhoneNumberCode.');
            }
            var localVarPath = "/api/services/app/account/SendPhoneNumberCode";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("PhoneWithCaptchaInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * AccountApi - functional programming interface
 * @export
 */
exports.AccountApiFp = function (configuration) {
    return {
        /**
         *
         * @summary 登录认证
         * @param {LoginModel} loginModel
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountAuthenticate: function (loginModel, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.AccountApiFetchParamCreator(configuration).accountAuthenticate(loginModel, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 绑定账号  （无调用）
         * @param {BindingThirdPartyInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAccountBindingThirdParty: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.AccountApiFetchParamCreator(configuration).appAccountBindingThirdParty(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 租户是否可用  （无调用）
         * @param {IsTenantAvailableInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAccountIsTenantAvailable: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.AccountApiFetchParamCreator(configuration).appAccountIsTenantAvailable(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 登录时发送手机证码
         * @param {PhoneWithCaptchaInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAccountSendPhoneNumberCode: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.AccountApiFetchParamCreator(configuration).appAccountSendPhoneNumberCode(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        }
    };
};
/**
 * AccountApi - factory interface
 * @export
 */
exports.AccountApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary 登录认证
         * @param {LoginModel} loginModel
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountAuthenticate: function (loginModel, X_XSRF_TOKEN, authorization, options) {
            return exports.AccountApiFp(configuration).accountAuthenticate(loginModel, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 绑定账号  （无调用）
         * @param {BindingThirdPartyInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAccountBindingThirdParty: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.AccountApiFp(configuration).appAccountBindingThirdParty(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 租户是否可用  （无调用）
         * @param {IsTenantAvailableInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAccountIsTenantAvailable: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.AccountApiFp(configuration).appAccountIsTenantAvailable(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 登录时发送手机证码
         * @param {PhoneWithCaptchaInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAccountSendPhoneNumberCode: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.AccountApiFp(configuration).appAccountSendPhoneNumberCode(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        }
    };
};
/**
 * AccountApi - object-oriented interface
 * @export
 * @class AccountApi
 * @extends {BaseAPI}
 */
var AccountApi = /** @class */ (function (_super) {
    __extends(AccountApi, _super);
    function AccountApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary 登录认证
     * @param {LoginModel} loginModel
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    AccountApi.prototype.accountAuthenticate = function (loginModel, X_XSRF_TOKEN, authorization, options) {
        return exports.AccountApiFp(this.configuration).accountAuthenticate(loginModel, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 绑定账号  （无调用）
     * @param {BindingThirdPartyInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    AccountApi.prototype.appAccountBindingThirdParty = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.AccountApiFp(this.configuration).appAccountBindingThirdParty(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 租户是否可用  （无调用）
     * @param {IsTenantAvailableInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    AccountApi.prototype.appAccountIsTenantAvailable = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.AccountApiFp(this.configuration).appAccountIsTenantAvailable(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 登录时发送手机证码
     * @param {PhoneWithCaptchaInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    AccountApi.prototype.appAccountSendPhoneNumberCode = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.AccountApiFp(this.configuration).appAccountSendPhoneNumberCode(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    return AccountApi;
}(BaseAPI));
exports.AccountApi = AccountApi;
/**
 * ActiveApi - fetch parameter creator
 * @export
 */
exports.ActiveApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary 验证邮箱验  （sendemail）
         * @param {ConfirmEmailCodeInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appActiveConfirmEmailByCode: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appActiveConfirmEmailByCode.');
            }
            var localVarPath = "/api/services/app/active/ConfirmEmailByCode";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ConfirmEmailCodeInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 验证手机号  （sendemail）
         * @param {VerificationCodeInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appActiveConfirmPhoneNumberByCode: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appActiveConfirmPhoneNumberByCode.');
            }
            var localVarPath = "/api/services/app/active/ConfirmPhoneNumberByCode";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("VerificationCodeInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 发送邮箱验证码  （sendemail）
         * @param {SendConfirmEmailByCaptchaInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appActiveSendConfirmEmailCode: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appActiveSendConfirmEmailCode.');
            }
            var localVarPath = "/api/services/app/active/SendConfirmEmailCode";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("SendConfirmEmailByCaptchaInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 发送手机激活验证码  （sendemail）
         * @param {VerificationCodeInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appActiveSendConfirmPhoneNumberByCode: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appActiveSendConfirmPhoneNumberByCode.');
            }
            var localVarPath = "/api/services/app/active/SendConfirmPhoneNumberByCode";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("VerificationCodeInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * ActiveApi - functional programming interface
 * @export
 */
exports.ActiveApiFp = function (configuration) {
    return {
        /**
         *
         * @summary 验证邮箱验  （sendemail）
         * @param {ConfirmEmailCodeInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appActiveConfirmEmailByCode: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.ActiveApiFetchParamCreator(configuration).appActiveConfirmEmailByCode(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 验证手机号  （sendemail）
         * @param {VerificationCodeInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appActiveConfirmPhoneNumberByCode: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.ActiveApiFetchParamCreator(configuration).appActiveConfirmPhoneNumberByCode(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 发送邮箱验证码  （sendemail）
         * @param {SendConfirmEmailByCaptchaInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appActiveSendConfirmEmailCode: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.ActiveApiFetchParamCreator(configuration).appActiveSendConfirmEmailCode(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 发送手机激活验证码  （sendemail）
         * @param {VerificationCodeInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appActiveSendConfirmPhoneNumberByCode: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.ActiveApiFetchParamCreator(configuration).appActiveSendConfirmPhoneNumberByCode(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        }
    };
};
/**
 * ActiveApi - factory interface
 * @export
 */
exports.ActiveApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary 验证邮箱验  （sendemail）
         * @param {ConfirmEmailCodeInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appActiveConfirmEmailByCode: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.ActiveApiFp(configuration).appActiveConfirmEmailByCode(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 验证手机号  （sendemail）
         * @param {VerificationCodeInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appActiveConfirmPhoneNumberByCode: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.ActiveApiFp(configuration).appActiveConfirmPhoneNumberByCode(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 发送邮箱验证码  （sendemail）
         * @param {SendConfirmEmailByCaptchaInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appActiveSendConfirmEmailCode: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.ActiveApiFp(configuration).appActiveSendConfirmEmailCode(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 发送手机激活验证码  （sendemail）
         * @param {VerificationCodeInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appActiveSendConfirmPhoneNumberByCode: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.ActiveApiFp(configuration).appActiveSendConfirmPhoneNumberByCode(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        }
    };
};
/**
 * ActiveApi - object-oriented interface
 * @export
 * @class ActiveApi
 * @extends {BaseAPI}
 */
var ActiveApi = /** @class */ (function (_super) {
    __extends(ActiveApi, _super);
    function ActiveApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary 验证邮箱验  （sendemail）
     * @param {ConfirmEmailCodeInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActiveApi
     */
    ActiveApi.prototype.appActiveConfirmEmailByCode = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.ActiveApiFp(this.configuration).appActiveConfirmEmailByCode(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 验证手机号  （sendemail）
     * @param {VerificationCodeInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActiveApi
     */
    ActiveApi.prototype.appActiveConfirmPhoneNumberByCode = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.ActiveApiFp(this.configuration).appActiveConfirmPhoneNumberByCode(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 发送邮箱验证码  （sendemail）
     * @param {SendConfirmEmailByCaptchaInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActiveApi
     */
    ActiveApi.prototype.appActiveSendConfirmEmailCode = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.ActiveApiFp(this.configuration).appActiveSendConfirmEmailCode(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 发送手机激活验证码  （sendemail）
     * @param {VerificationCodeInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActiveApi
     */
    ActiveApi.prototype.appActiveSendConfirmPhoneNumberByCode = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.ActiveApiFp(this.configuration).appActiveSendConfirmPhoneNumberByCode(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    return ActiveApi;
}(BaseAPI));
exports.ActiveApi = ActiveApi;
/**
 * AppEditionsApi - fetch parameter creator
 * @export
 */
exports.AppEditionsApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {VersionInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsCheckUpdate: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appAppEditionsCheckUpdate.');
            }
            var localVarPath = "/api/services/app/appEditions/CheckUpdate";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("VersionInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {CreateAndroidAppEditionInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsCreateAndroidAppEdition: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appAppEditionsCreateAndroidAppEdition.');
            }
            var localVarPath = "/api/services/app/appEditions/CreateAndroidAppEdition";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CreateAndroidAppEditionInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {CreateIOSAppEditionInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsCreateIOSAppEdition: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appAppEditionsCreateIOSAppEdition.');
            }
            var localVarPath = "/api/services/app/appEditions/CreateIOSAppEdition";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CreateIOSAppEditionInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {EntityDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsDeleteAppEdition: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appAppEditionsDeleteAppEdition.');
            }
            var localVarPath = "/api/services/app/appEditions/DeleteAppEdition";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EntityDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {number} id
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsDownloadAppEdition: function (id, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling appAppEditionsDownloadAppEdition.');
            }
            var localVarPath = "/api/services/app/appEditions/DownloadAppEdition";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {VersionInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsGetAbout: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appAppEditionsGetAbout.');
            }
            var localVarPath = "/api/services/app/appEditions/GetAbout";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("VersionInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {VersionInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsGetAboutAndCheckUpdate: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appAppEditionsGetAboutAndCheckUpdate.');
            }
            var localVarPath = "/api/services/app/appEditions/GetAboutAndCheckUpdate";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("VersionInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {GetAppEditionsInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsGetAppEditions: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appAppEditionsGetAppEditions.');
            }
            var localVarPath = "/api/services/app/appEditions/GetAppEditions";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("GetAppEditionsInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {UpdateAndroidAppEditionInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsUpdateAndroidAppEdition: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appAppEditionsUpdateAndroidAppEdition.');
            }
            var localVarPath = "/api/services/app/appEditions/UpdateAndroidAppEdition";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("UpdateAndroidAppEditionInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {UpdateIOSAppEditionInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsUpdateIOSAppEdition: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appAppEditionsUpdateIOSAppEdition.');
            }
            var localVarPath = "/api/services/app/appEditions/UpdateIOSAppEdition";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("UpdateIOSAppEditionInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsUploadAppEdition: function (X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/services/app/appEditions/UploadAppEdition";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * AppEditionsApi - functional programming interface
 * @export
 */
exports.AppEditionsApiFp = function (configuration) {
    return {
        /**
         *
         * @param {VersionInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsCheckUpdate: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.AppEditionsApiFetchParamCreator(configuration).appAppEditionsCheckUpdate(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {CreateAndroidAppEditionInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsCreateAndroidAppEdition: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.AppEditionsApiFetchParamCreator(configuration).appAppEditionsCreateAndroidAppEdition(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {CreateIOSAppEditionInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsCreateIOSAppEdition: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.AppEditionsApiFetchParamCreator(configuration).appAppEditionsCreateIOSAppEdition(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {EntityDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsDeleteAppEdition: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.AppEditionsApiFetchParamCreator(configuration).appAppEditionsDeleteAppEdition(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {number} id
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsDownloadAppEdition: function (id, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.AppEditionsApiFetchParamCreator(configuration).appAppEditionsDownloadAppEdition(id, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {VersionInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsGetAbout: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.AppEditionsApiFetchParamCreator(configuration).appAppEditionsGetAbout(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {VersionInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsGetAboutAndCheckUpdate: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.AppEditionsApiFetchParamCreator(configuration).appAppEditionsGetAboutAndCheckUpdate(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {GetAppEditionsInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsGetAppEditions: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.AppEditionsApiFetchParamCreator(configuration).appAppEditionsGetAppEditions(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {UpdateAndroidAppEditionInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsUpdateAndroidAppEdition: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.AppEditionsApiFetchParamCreator(configuration).appAppEditionsUpdateAndroidAppEdition(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {UpdateIOSAppEditionInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsUpdateIOSAppEdition: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.AppEditionsApiFetchParamCreator(configuration).appAppEditionsUpdateIOSAppEdition(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsUploadAppEdition: function (X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.AppEditionsApiFetchParamCreator(configuration).appAppEditionsUploadAppEdition(X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        }
    };
};
/**
 * AppEditionsApi - factory interface
 * @export
 */
exports.AppEditionsApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @param {VersionInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsCheckUpdate: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.AppEditionsApiFp(configuration).appAppEditionsCheckUpdate(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {CreateAndroidAppEditionInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsCreateAndroidAppEdition: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.AppEditionsApiFp(configuration).appAppEditionsCreateAndroidAppEdition(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {CreateIOSAppEditionInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsCreateIOSAppEdition: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.AppEditionsApiFp(configuration).appAppEditionsCreateIOSAppEdition(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {EntityDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsDeleteAppEdition: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.AppEditionsApiFp(configuration).appAppEditionsDeleteAppEdition(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {number} id
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsDownloadAppEdition: function (id, X_XSRF_TOKEN, authorization, options) {
            return exports.AppEditionsApiFp(configuration).appAppEditionsDownloadAppEdition(id, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {VersionInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsGetAbout: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.AppEditionsApiFp(configuration).appAppEditionsGetAbout(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {VersionInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsGetAboutAndCheckUpdate: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.AppEditionsApiFp(configuration).appAppEditionsGetAboutAndCheckUpdate(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {GetAppEditionsInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsGetAppEditions: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.AppEditionsApiFp(configuration).appAppEditionsGetAppEditions(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {UpdateAndroidAppEditionInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsUpdateAndroidAppEdition: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.AppEditionsApiFp(configuration).appAppEditionsUpdateAndroidAppEdition(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {UpdateIOSAppEditionInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsUpdateIOSAppEdition: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.AppEditionsApiFp(configuration).appAppEditionsUpdateIOSAppEdition(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsUploadAppEdition: function (X_XSRF_TOKEN, authorization, options) {
            return exports.AppEditionsApiFp(configuration).appAppEditionsUploadAppEdition(X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        }
    };
};
/**
 * AppEditionsApi - object-oriented interface
 * @export
 * @class AppEditionsApi
 * @extends {BaseAPI}
 */
var AppEditionsApi = /** @class */ (function (_super) {
    __extends(AppEditionsApi, _super);
    function AppEditionsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {VersionInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppEditionsApi
     */
    AppEditionsApi.prototype.appAppEditionsCheckUpdate = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.AppEditionsApiFp(this.configuration).appAppEditionsCheckUpdate(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {CreateAndroidAppEditionInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppEditionsApi
     */
    AppEditionsApi.prototype.appAppEditionsCreateAndroidAppEdition = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.AppEditionsApiFp(this.configuration).appAppEditionsCreateAndroidAppEdition(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {CreateIOSAppEditionInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppEditionsApi
     */
    AppEditionsApi.prototype.appAppEditionsCreateIOSAppEdition = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.AppEditionsApiFp(this.configuration).appAppEditionsCreateIOSAppEdition(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {EntityDto} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppEditionsApi
     */
    AppEditionsApi.prototype.appAppEditionsDeleteAppEdition = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.AppEditionsApiFp(this.configuration).appAppEditionsDeleteAppEdition(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {number} id
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppEditionsApi
     */
    AppEditionsApi.prototype.appAppEditionsDownloadAppEdition = function (id, X_XSRF_TOKEN, authorization, options) {
        return exports.AppEditionsApiFp(this.configuration).appAppEditionsDownloadAppEdition(id, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {VersionInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppEditionsApi
     */
    AppEditionsApi.prototype.appAppEditionsGetAbout = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.AppEditionsApiFp(this.configuration).appAppEditionsGetAbout(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {VersionInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppEditionsApi
     */
    AppEditionsApi.prototype.appAppEditionsGetAboutAndCheckUpdate = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.AppEditionsApiFp(this.configuration).appAppEditionsGetAboutAndCheckUpdate(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {GetAppEditionsInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppEditionsApi
     */
    AppEditionsApi.prototype.appAppEditionsGetAppEditions = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.AppEditionsApiFp(this.configuration).appAppEditionsGetAppEditions(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {UpdateAndroidAppEditionInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppEditionsApi
     */
    AppEditionsApi.prototype.appAppEditionsUpdateAndroidAppEdition = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.AppEditionsApiFp(this.configuration).appAppEditionsUpdateAndroidAppEdition(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {UpdateIOSAppEditionInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppEditionsApi
     */
    AppEditionsApi.prototype.appAppEditionsUpdateIOSAppEdition = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.AppEditionsApiFp(this.configuration).appAppEditionsUpdateIOSAppEdition(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppEditionsApi
     */
    AppEditionsApi.prototype.appAppEditionsUploadAppEdition = function (X_XSRF_TOKEN, authorization, options) {
        return exports.AppEditionsApiFp(this.configuration).appAppEditionsUploadAppEdition(X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    return AppEditionsApi;
}(BaseAPI));
exports.AppEditionsApi = AppEditionsApi;
/**
 * AppStartPageApi - fetch parameter creator
 * @export
 */
exports.AppStartPageApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {CreateAppStartPageDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppStartPageCreate: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appAppStartPageCreate.');
            }
            var localVarPath = "/api/services/app/appStartPage/Create";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CreateAppStartPageDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {EntityDtoInt32} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppStartPageDelete: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appAppStartPageDelete.');
            }
            var localVarPath = "/api/services/app/appStartPage/Delete";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EntityDtoInt32" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 批量删除
         * @param {ArrayDtoInt32} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppStartPageDeleteBatch: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appAppStartPageDeleteBatch.');
            }
            var localVarPath = "/api/services/app/appStartPage/DeleteBatch";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ArrayDtoInt32" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {EntityDtoInt32} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppStartPageGet: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appAppStartPageGet.');
            }
            var localVarPath = "/api/services/app/appStartPage/Get";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EntityDtoInt32" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {PagedSortedAndFilteredInputDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppStartPageGetAll: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appAppStartPageGetAll.');
            }
            var localVarPath = "/api/services/app/appStartPage/GetAll";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("PagedSortedAndFilteredInputDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary App端： 获取图片
         * @param {GetAppStartPageInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppStartPageGetAppStartPage: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appAppStartPageGetAppStartPage.');
            }
            var localVarPath = "/api/services/app/appStartPage/GetAppStartPage";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("GetAppStartPageInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary App端： 检查图片是否有更新
         * @param {IsUpatedInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppStartPageIsUpdated: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appAppStartPageIsUpdated.');
            }
            var localVarPath = "/api/services/app/appStartPage/IsUpdated";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("IsUpatedInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {UpdateAppStartPageDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppStartPageUpdate: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appAppStartPageUpdate.');
            }
            var localVarPath = "/api/services/app/appStartPage/Update";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("UpdateAppStartPageDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * AppStartPageApi - functional programming interface
 * @export
 */
exports.AppStartPageApiFp = function (configuration) {
    return {
        /**
         *
         * @param {CreateAppStartPageDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppStartPageCreate: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.AppStartPageApiFetchParamCreator(configuration).appAppStartPageCreate(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {EntityDtoInt32} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppStartPageDelete: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.AppStartPageApiFetchParamCreator(configuration).appAppStartPageDelete(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 批量删除
         * @param {ArrayDtoInt32} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppStartPageDeleteBatch: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.AppStartPageApiFetchParamCreator(configuration).appAppStartPageDeleteBatch(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {EntityDtoInt32} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppStartPageGet: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.AppStartPageApiFetchParamCreator(configuration).appAppStartPageGet(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {PagedSortedAndFilteredInputDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppStartPageGetAll: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.AppStartPageApiFetchParamCreator(configuration).appAppStartPageGetAll(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary App端： 获取图片
         * @param {GetAppStartPageInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppStartPageGetAppStartPage: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.AppStartPageApiFetchParamCreator(configuration).appAppStartPageGetAppStartPage(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary App端： 检查图片是否有更新
         * @param {IsUpatedInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppStartPageIsUpdated: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.AppStartPageApiFetchParamCreator(configuration).appAppStartPageIsUpdated(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {UpdateAppStartPageDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppStartPageUpdate: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.AppStartPageApiFetchParamCreator(configuration).appAppStartPageUpdate(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        }
    };
};
/**
 * AppStartPageApi - factory interface
 * @export
 */
exports.AppStartPageApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @param {CreateAppStartPageDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppStartPageCreate: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.AppStartPageApiFp(configuration).appAppStartPageCreate(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {EntityDtoInt32} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppStartPageDelete: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.AppStartPageApiFp(configuration).appAppStartPageDelete(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 批量删除
         * @param {ArrayDtoInt32} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppStartPageDeleteBatch: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.AppStartPageApiFp(configuration).appAppStartPageDeleteBatch(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {EntityDtoInt32} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppStartPageGet: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.AppStartPageApiFp(configuration).appAppStartPageGet(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {PagedSortedAndFilteredInputDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppStartPageGetAll: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.AppStartPageApiFp(configuration).appAppStartPageGetAll(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary App端： 获取图片
         * @param {GetAppStartPageInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppStartPageGetAppStartPage: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.AppStartPageApiFp(configuration).appAppStartPageGetAppStartPage(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary App端： 检查图片是否有更新
         * @param {IsUpatedInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppStartPageIsUpdated: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.AppStartPageApiFp(configuration).appAppStartPageIsUpdated(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {UpdateAppStartPageDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppStartPageUpdate: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.AppStartPageApiFp(configuration).appAppStartPageUpdate(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        }
    };
};
/**
 * AppStartPageApi - object-oriented interface
 * @export
 * @class AppStartPageApi
 * @extends {BaseAPI}
 */
var AppStartPageApi = /** @class */ (function (_super) {
    __extends(AppStartPageApi, _super);
    function AppStartPageApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {CreateAppStartPageDto} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppStartPageApi
     */
    AppStartPageApi.prototype.appAppStartPageCreate = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.AppStartPageApiFp(this.configuration).appAppStartPageCreate(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {EntityDtoInt32} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppStartPageApi
     */
    AppStartPageApi.prototype.appAppStartPageDelete = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.AppStartPageApiFp(this.configuration).appAppStartPageDelete(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 批量删除
     * @param {ArrayDtoInt32} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppStartPageApi
     */
    AppStartPageApi.prototype.appAppStartPageDeleteBatch = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.AppStartPageApiFp(this.configuration).appAppStartPageDeleteBatch(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {EntityDtoInt32} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppStartPageApi
     */
    AppStartPageApi.prototype.appAppStartPageGet = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.AppStartPageApiFp(this.configuration).appAppStartPageGet(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {PagedSortedAndFilteredInputDto} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppStartPageApi
     */
    AppStartPageApi.prototype.appAppStartPageGetAll = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.AppStartPageApiFp(this.configuration).appAppStartPageGetAll(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary App端： 获取图片
     * @param {GetAppStartPageInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppStartPageApi
     */
    AppStartPageApi.prototype.appAppStartPageGetAppStartPage = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.AppStartPageApiFp(this.configuration).appAppStartPageGetAppStartPage(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary App端： 检查图片是否有更新
     * @param {IsUpatedInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppStartPageApi
     */
    AppStartPageApi.prototype.appAppStartPageIsUpdated = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.AppStartPageApiFp(this.configuration).appAppStartPageIsUpdated(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {UpdateAppStartPageDto} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppStartPageApi
     */
    AppStartPageApi.prototype.appAppStartPageUpdate = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.AppStartPageApiFp(this.configuration).appAppStartPageUpdate(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    return AppStartPageApi;
}(BaseAPI));
exports.AppStartPageApi = AppStartPageApi;
/**
 * AuditLogApi - fetch parameter creator
 * @export
 */
exports.AuditLogApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {GetAuditLogsInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAuditLogGetAuditLogs: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appAuditLogGetAuditLogs.');
            }
            var localVarPath = "/api/services/app/auditLog/GetAuditLogs";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("GetAuditLogsInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {GetAuditLogsInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAuditLogGetAuditLogsToExcel: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appAuditLogGetAuditLogsToExcel.');
            }
            var localVarPath = "/api/services/app/auditLog/GetAuditLogsToExcel";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("GetAuditLogsInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * AuditLogApi - functional programming interface
 * @export
 */
exports.AuditLogApiFp = function (configuration) {
    return {
        /**
         *
         * @param {GetAuditLogsInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAuditLogGetAuditLogs: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.AuditLogApiFetchParamCreator(configuration).appAuditLogGetAuditLogs(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {GetAuditLogsInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAuditLogGetAuditLogsToExcel: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.AuditLogApiFetchParamCreator(configuration).appAuditLogGetAuditLogsToExcel(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        }
    };
};
/**
 * AuditLogApi - factory interface
 * @export
 */
exports.AuditLogApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @param {GetAuditLogsInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAuditLogGetAuditLogs: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.AuditLogApiFp(configuration).appAuditLogGetAuditLogs(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {GetAuditLogsInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAuditLogGetAuditLogsToExcel: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.AuditLogApiFp(configuration).appAuditLogGetAuditLogsToExcel(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        }
    };
};
/**
 * AuditLogApi - object-oriented interface
 * @export
 * @class AuditLogApi
 * @extends {BaseAPI}
 */
var AuditLogApi = /** @class */ (function (_super) {
    __extends(AuditLogApi, _super);
    function AuditLogApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {GetAuditLogsInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditLogApi
     */
    AuditLogApi.prototype.appAuditLogGetAuditLogs = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.AuditLogApiFp(this.configuration).appAuditLogGetAuditLogs(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {GetAuditLogsInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditLogApi
     */
    AuditLogApi.prototype.appAuditLogGetAuditLogsToExcel = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.AuditLogApiFp(this.configuration).appAuditLogGetAuditLogsToExcel(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    return AuditLogApi;
}(BaseAPI));
exports.AuditLogApi = AuditLogApi;
/**
 * ChatApi - fetch parameter creator
 * @export
 */
exports.ChatApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appChatGetUserChatFriendsWithSettings: function (X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/services/app/chat/GetUserChatFriendsWithSettings";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {GetUserChatMessagesInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appChatGetUserChatMessages: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appChatGetUserChatMessages.');
            }
            var localVarPath = "/api/services/app/chat/GetUserChatMessages";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("GetUserChatMessagesInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {MarkAllUnreadMessagesOfUserAsReadInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appChatMarkAllUnreadMessagesOfUserAsRead: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appChatMarkAllUnreadMessagesOfUserAsRead.');
            }
            var localVarPath = "/api/services/app/chat/MarkAllUnreadMessagesOfUserAsRead";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("MarkAllUnreadMessagesOfUserAsReadInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * ChatApi - functional programming interface
 * @export
 */
exports.ChatApiFp = function (configuration) {
    return {
        /**
         *
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appChatGetUserChatFriendsWithSettings: function (X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.ChatApiFetchParamCreator(configuration).appChatGetUserChatFriendsWithSettings(X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {GetUserChatMessagesInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appChatGetUserChatMessages: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.ChatApiFetchParamCreator(configuration).appChatGetUserChatMessages(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {MarkAllUnreadMessagesOfUserAsReadInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appChatMarkAllUnreadMessagesOfUserAsRead: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.ChatApiFetchParamCreator(configuration).appChatMarkAllUnreadMessagesOfUserAsRead(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        }
    };
};
/**
 * ChatApi - factory interface
 * @export
 */
exports.ChatApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appChatGetUserChatFriendsWithSettings: function (X_XSRF_TOKEN, authorization, options) {
            return exports.ChatApiFp(configuration).appChatGetUserChatFriendsWithSettings(X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {GetUserChatMessagesInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appChatGetUserChatMessages: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.ChatApiFp(configuration).appChatGetUserChatMessages(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {MarkAllUnreadMessagesOfUserAsReadInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appChatMarkAllUnreadMessagesOfUserAsRead: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.ChatApiFp(configuration).appChatMarkAllUnreadMessagesOfUserAsRead(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        }
    };
};
/**
 * ChatApi - object-oriented interface
 * @export
 * @class ChatApi
 * @extends {BaseAPI}
 */
var ChatApi = /** @class */ (function (_super) {
    __extends(ChatApi, _super);
    function ChatApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    ChatApi.prototype.appChatGetUserChatFriendsWithSettings = function (X_XSRF_TOKEN, authorization, options) {
        return exports.ChatApiFp(this.configuration).appChatGetUserChatFriendsWithSettings(X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {GetUserChatMessagesInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    ChatApi.prototype.appChatGetUserChatMessages = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.ChatApiFp(this.configuration).appChatGetUserChatMessages(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {MarkAllUnreadMessagesOfUserAsReadInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    ChatApi.prototype.appChatMarkAllUnreadMessagesOfUserAsRead = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.ChatApiFp(this.configuration).appChatMarkAllUnreadMessagesOfUserAsRead(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    return ChatApi;
}(BaseAPI));
exports.ChatApi = ChatApi;
/**
 * ConfigurationApi - fetch parameter creator
 * @export
 */
exports.ConfigurationApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary 设置皮肤
         * @param {ChangeUiThemeInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appConfigurationChangeUiTheme: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appConfigurationChangeUiTheme.');
            }
            var localVarPath = "/api/services/app/configuration/ChangeUiTheme";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ChangeUiThemeInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 获取所有配置
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appConfigurationGetAllSettings: function (X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/services/app/configuration/GetAllSettings";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 获取客户端设置
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appConfigurationGetClientSetting: function (X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/services/app/configuration/GetClientSetting";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 获取用户设置的皮肤
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appConfigurationGetUiTheme: function (X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/services/app/configuration/GetUiTheme";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 更新所有配置
         * @param {any} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appConfigurationUpdateAllSettings: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appConfigurationUpdateAllSettings.');
            }
            var localVarPath = "/api/services/app/configuration/UpdateAllSettings";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("any" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * ConfigurationApi - functional programming interface
 * @export
 */
exports.ConfigurationApiFp = function (configuration) {
    return {
        /**
         *
         * @summary 设置皮肤
         * @param {ChangeUiThemeInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appConfigurationChangeUiTheme: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.ConfigurationApiFetchParamCreator(configuration).appConfigurationChangeUiTheme(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 获取所有配置
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appConfigurationGetAllSettings: function (X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.ConfigurationApiFetchParamCreator(configuration).appConfigurationGetAllSettings(X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 获取客户端设置
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appConfigurationGetClientSetting: function (X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.ConfigurationApiFetchParamCreator(configuration).appConfigurationGetClientSetting(X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 获取用户设置的皮肤
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appConfigurationGetUiTheme: function (X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.ConfigurationApiFetchParamCreator(configuration).appConfigurationGetUiTheme(X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 更新所有配置
         * @param {any} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appConfigurationUpdateAllSettings: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.ConfigurationApiFetchParamCreator(configuration).appConfigurationUpdateAllSettings(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        }
    };
};
/**
 * ConfigurationApi - factory interface
 * @export
 */
exports.ConfigurationApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary 设置皮肤
         * @param {ChangeUiThemeInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appConfigurationChangeUiTheme: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.ConfigurationApiFp(configuration).appConfigurationChangeUiTheme(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 获取所有配置
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appConfigurationGetAllSettings: function (X_XSRF_TOKEN, authorization, options) {
            return exports.ConfigurationApiFp(configuration).appConfigurationGetAllSettings(X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 获取客户端设置
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appConfigurationGetClientSetting: function (X_XSRF_TOKEN, authorization, options) {
            return exports.ConfigurationApiFp(configuration).appConfigurationGetClientSetting(X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 获取用户设置的皮肤
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appConfigurationGetUiTheme: function (X_XSRF_TOKEN, authorization, options) {
            return exports.ConfigurationApiFp(configuration).appConfigurationGetUiTheme(X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 更新所有配置
         * @param {any} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appConfigurationUpdateAllSettings: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.ConfigurationApiFp(configuration).appConfigurationUpdateAllSettings(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        }
    };
};
/**
 * ConfigurationApi - object-oriented interface
 * @export
 * @class ConfigurationApi
 * @extends {BaseAPI}
 */
var ConfigurationApi = /** @class */ (function (_super) {
    __extends(ConfigurationApi, _super);
    function ConfigurationApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary 设置皮肤
     * @param {ChangeUiThemeInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationApi
     */
    ConfigurationApi.prototype.appConfigurationChangeUiTheme = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.ConfigurationApiFp(this.configuration).appConfigurationChangeUiTheme(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 获取所有配置
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationApi
     */
    ConfigurationApi.prototype.appConfigurationGetAllSettings = function (X_XSRF_TOKEN, authorization, options) {
        return exports.ConfigurationApiFp(this.configuration).appConfigurationGetAllSettings(X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 获取客户端设置
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationApi
     */
    ConfigurationApi.prototype.appConfigurationGetClientSetting = function (X_XSRF_TOKEN, authorization, options) {
        return exports.ConfigurationApiFp(this.configuration).appConfigurationGetClientSetting(X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 获取用户设置的皮肤
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationApi
     */
    ConfigurationApi.prototype.appConfigurationGetUiTheme = function (X_XSRF_TOKEN, authorization, options) {
        return exports.ConfigurationApiFp(this.configuration).appConfigurationGetUiTheme(X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 更新所有配置
     * @param {any} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationApi
     */
    ConfigurationApi.prototype.appConfigurationUpdateAllSettings = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.ConfigurationApiFp(this.configuration).appConfigurationUpdateAllSettings(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    return ConfigurationApi;
}(BaseAPI));
exports.ConfigurationApi = ConfigurationApi;
/**
 * DemoApi - fetch parameter creator
 * @export
 */
exports.DemoApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {CreateDemoDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appDemoCreate: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appDemoCreate.');
            }
            var localVarPath = "/api/services/app/demo/Create";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CreateDemoDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {EntityDtoInt32} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appDemoDelete: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appDemoDelete.');
            }
            var localVarPath = "/api/services/app/demo/Delete";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EntityDtoInt32" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {EntityDtoInt32} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appDemoGet: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appDemoGet.');
            }
            var localVarPath = "/api/services/app/demo/Get";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EntityDtoInt32" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {PagedSortedAndFilteredInputDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appDemoGetAll: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appDemoGetAll.');
            }
            var localVarPath = "/api/services/app/demo/GetAll";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("PagedSortedAndFilteredInputDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {UpdateDemoDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appDemoUpdate: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appDemoUpdate.');
            }
            var localVarPath = "/api/services/app/demo/Update";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("UpdateDemoDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * DemoApi - functional programming interface
 * @export
 */
exports.DemoApiFp = function (configuration) {
    return {
        /**
         *
         * @param {CreateDemoDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appDemoCreate: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.DemoApiFetchParamCreator(configuration).appDemoCreate(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {EntityDtoInt32} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appDemoDelete: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.DemoApiFetchParamCreator(configuration).appDemoDelete(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {EntityDtoInt32} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appDemoGet: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.DemoApiFetchParamCreator(configuration).appDemoGet(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {PagedSortedAndFilteredInputDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appDemoGetAll: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.DemoApiFetchParamCreator(configuration).appDemoGetAll(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {UpdateDemoDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appDemoUpdate: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.DemoApiFetchParamCreator(configuration).appDemoUpdate(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        }
    };
};
/**
 * DemoApi - factory interface
 * @export
 */
exports.DemoApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @param {CreateDemoDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appDemoCreate: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.DemoApiFp(configuration).appDemoCreate(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {EntityDtoInt32} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appDemoDelete: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.DemoApiFp(configuration).appDemoDelete(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {EntityDtoInt32} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appDemoGet: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.DemoApiFp(configuration).appDemoGet(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {PagedSortedAndFilteredInputDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appDemoGetAll: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.DemoApiFp(configuration).appDemoGetAll(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {UpdateDemoDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appDemoUpdate: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.DemoApiFp(configuration).appDemoUpdate(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        }
    };
};
/**
 * DemoApi - object-oriented interface
 * @export
 * @class DemoApi
 * @extends {BaseAPI}
 */
var DemoApi = /** @class */ (function (_super) {
    __extends(DemoApi, _super);
    function DemoApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {CreateDemoDto} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DemoApi
     */
    DemoApi.prototype.appDemoCreate = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.DemoApiFp(this.configuration).appDemoCreate(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {EntityDtoInt32} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DemoApi
     */
    DemoApi.prototype.appDemoDelete = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.DemoApiFp(this.configuration).appDemoDelete(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {EntityDtoInt32} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DemoApi
     */
    DemoApi.prototype.appDemoGet = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.DemoApiFp(this.configuration).appDemoGet(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {PagedSortedAndFilteredInputDto} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DemoApi
     */
    DemoApi.prototype.appDemoGetAll = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.DemoApiFp(this.configuration).appDemoGetAll(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {UpdateDemoDto} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DemoApi
     */
    DemoApi.prototype.appDemoUpdate = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.DemoApiFp(this.configuration).appDemoUpdate(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    return DemoApi;
}(BaseAPI));
exports.DemoApi = DemoApi;
/**
 * DragVerificationApi - fetch parameter creator
 * @export
 */
exports.DragVerificationApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {CheckCodeInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appDragVerificationCheckCode: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appDragVerificationCheckCode.');
            }
            var localVarPath = "/api/services/app/dragVerification/CheckCode";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CheckCodeInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appDragVerificationGetDragVerificationCode: function (X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/services/app/dragVerification/GetDragVerificationCode";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * DragVerificationApi - functional programming interface
 * @export
 */
exports.DragVerificationApiFp = function (configuration) {
    return {
        /**
         *
         * @param {CheckCodeInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appDragVerificationCheckCode: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.DragVerificationApiFetchParamCreator(configuration).appDragVerificationCheckCode(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appDragVerificationGetDragVerificationCode: function (X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.DragVerificationApiFetchParamCreator(configuration).appDragVerificationGetDragVerificationCode(X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        }
    };
};
/**
 * DragVerificationApi - factory interface
 * @export
 */
exports.DragVerificationApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @param {CheckCodeInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appDragVerificationCheckCode: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.DragVerificationApiFp(configuration).appDragVerificationCheckCode(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appDragVerificationGetDragVerificationCode: function (X_XSRF_TOKEN, authorization, options) {
            return exports.DragVerificationApiFp(configuration).appDragVerificationGetDragVerificationCode(X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        }
    };
};
/**
 * DragVerificationApi - object-oriented interface
 * @export
 * @class DragVerificationApi
 * @extends {BaseAPI}
 */
var DragVerificationApi = /** @class */ (function (_super) {
    __extends(DragVerificationApi, _super);
    function DragVerificationApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {CheckCodeInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DragVerificationApi
     */
    DragVerificationApi.prototype.appDragVerificationCheckCode = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.DragVerificationApiFp(this.configuration).appDragVerificationCheckCode(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DragVerificationApi
     */
    DragVerificationApi.prototype.appDragVerificationGetDragVerificationCode = function (X_XSRF_TOKEN, authorization, options) {
        return exports.DragVerificationApiFp(this.configuration).appDragVerificationGetDragVerificationCode(X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    return DragVerificationApi;
}(BaseAPI));
exports.DragVerificationApi = DragVerificationApi;
/**
 * FileSettingDemoApi - fetch parameter creator
 * @export
 */
exports.FileSettingDemoApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary 获取内容
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appFileSettingDemoGet: function (X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/services/app/fileSettingDemo/Get";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 修改内容
         * @param {SetFileSettingDemoDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appFileSettingDemoSet: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appFileSettingDemoSet.');
            }
            var localVarPath = "/api/services/app/fileSettingDemo/Set";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("SetFileSettingDemoDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * FileSettingDemoApi - functional programming interface
 * @export
 */
exports.FileSettingDemoApiFp = function (configuration) {
    return {
        /**
         *
         * @summary 获取内容
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appFileSettingDemoGet: function (X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.FileSettingDemoApiFetchParamCreator(configuration).appFileSettingDemoGet(X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 修改内容
         * @param {SetFileSettingDemoDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appFileSettingDemoSet: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.FileSettingDemoApiFetchParamCreator(configuration).appFileSettingDemoSet(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        }
    };
};
/**
 * FileSettingDemoApi - factory interface
 * @export
 */
exports.FileSettingDemoApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary 获取内容
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appFileSettingDemoGet: function (X_XSRF_TOKEN, authorization, options) {
            return exports.FileSettingDemoApiFp(configuration).appFileSettingDemoGet(X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 修改内容
         * @param {SetFileSettingDemoDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appFileSettingDemoSet: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.FileSettingDemoApiFp(configuration).appFileSettingDemoSet(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        }
    };
};
/**
 * FileSettingDemoApi - object-oriented interface
 * @export
 * @class FileSettingDemoApi
 * @extends {BaseAPI}
 */
var FileSettingDemoApi = /** @class */ (function (_super) {
    __extends(FileSettingDemoApi, _super);
    function FileSettingDemoApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary 获取内容
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileSettingDemoApi
     */
    FileSettingDemoApi.prototype.appFileSettingDemoGet = function (X_XSRF_TOKEN, authorization, options) {
        return exports.FileSettingDemoApiFp(this.configuration).appFileSettingDemoGet(X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 修改内容
     * @param {SetFileSettingDemoDto} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileSettingDemoApi
     */
    FileSettingDemoApi.prototype.appFileSettingDemoSet = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.FileSettingDemoApiFp(this.configuration).appFileSettingDemoSet(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    return FileSettingDemoApi;
}(BaseAPI));
exports.FileSettingDemoApi = FileSettingDemoApi;
/**
 * FriendshipApi - fetch parameter creator
 * @export
 */
exports.FriendshipApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {AcceptFriendshipRequestInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appFriendshipAcceptFriendshipRequest: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appFriendshipAcceptFriendshipRequest.');
            }
            var localVarPath = "/api/services/app/friendship/AcceptFriendshipRequest";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("AcceptFriendshipRequestInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {Array<CreateFriendshipRequestInput>} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appFriendshipBatchCreateFriendshipRequest: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appFriendshipBatchCreateFriendshipRequest.');
            }
            var localVarPath = "/api/services/app/friendship/BatchCreateFriendshipRequest";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Array&lt;CreateFriendshipRequestInput&gt;" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {BlockUserInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appFriendshipBlockUser: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appFriendshipBlockUser.');
            }
            var localVarPath = "/api/services/app/friendship/BlockUser";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("BlockUserInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {CreateFriendshipRequestInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appFriendshipCreateFriendshipRequest: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appFriendshipCreateFriendshipRequest.');
            }
            var localVarPath = "/api/services/app/friendship/CreateFriendshipRequest";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CreateFriendshipRequestInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {CreateFriendshipRequestByUserNameInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appFriendshipCreateFriendshipRequestByUserName: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appFriendshipCreateFriendshipRequestByUserName.');
            }
            var localVarPath = "/api/services/app/friendship/CreateFriendshipRequestByUserName";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CreateFriendshipRequestByUserNameInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {PagedAndFilteredInputDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appFriendshipGetCreateFriendshipUserList: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appFriendshipGetCreateFriendshipUserList.');
            }
            var localVarPath = "/api/services/app/friendship/GetCreateFriendshipUserList";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("PagedAndFilteredInputDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {UnblockUserInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appFriendshipUnblockUser: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appFriendshipUnblockUser.');
            }
            var localVarPath = "/api/services/app/friendship/UnblockUser";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("UnblockUserInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * FriendshipApi - functional programming interface
 * @export
 */
exports.FriendshipApiFp = function (configuration) {
    return {
        /**
         *
         * @param {AcceptFriendshipRequestInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appFriendshipAcceptFriendshipRequest: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.FriendshipApiFetchParamCreator(configuration).appFriendshipAcceptFriendshipRequest(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {Array<CreateFriendshipRequestInput>} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appFriendshipBatchCreateFriendshipRequest: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.FriendshipApiFetchParamCreator(configuration).appFriendshipBatchCreateFriendshipRequest(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {BlockUserInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appFriendshipBlockUser: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.FriendshipApiFetchParamCreator(configuration).appFriendshipBlockUser(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {CreateFriendshipRequestInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appFriendshipCreateFriendshipRequest: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.FriendshipApiFetchParamCreator(configuration).appFriendshipCreateFriendshipRequest(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {CreateFriendshipRequestByUserNameInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appFriendshipCreateFriendshipRequestByUserName: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.FriendshipApiFetchParamCreator(configuration).appFriendshipCreateFriendshipRequestByUserName(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {PagedAndFilteredInputDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appFriendshipGetCreateFriendshipUserList: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.FriendshipApiFetchParamCreator(configuration).appFriendshipGetCreateFriendshipUserList(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {UnblockUserInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appFriendshipUnblockUser: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.FriendshipApiFetchParamCreator(configuration).appFriendshipUnblockUser(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        }
    };
};
/**
 * FriendshipApi - factory interface
 * @export
 */
exports.FriendshipApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @param {AcceptFriendshipRequestInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appFriendshipAcceptFriendshipRequest: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.FriendshipApiFp(configuration).appFriendshipAcceptFriendshipRequest(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {Array<CreateFriendshipRequestInput>} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appFriendshipBatchCreateFriendshipRequest: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.FriendshipApiFp(configuration).appFriendshipBatchCreateFriendshipRequest(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {BlockUserInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appFriendshipBlockUser: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.FriendshipApiFp(configuration).appFriendshipBlockUser(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {CreateFriendshipRequestInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appFriendshipCreateFriendshipRequest: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.FriendshipApiFp(configuration).appFriendshipCreateFriendshipRequest(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {CreateFriendshipRequestByUserNameInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appFriendshipCreateFriendshipRequestByUserName: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.FriendshipApiFp(configuration).appFriendshipCreateFriendshipRequestByUserName(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {PagedAndFilteredInputDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appFriendshipGetCreateFriendshipUserList: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.FriendshipApiFp(configuration).appFriendshipGetCreateFriendshipUserList(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {UnblockUserInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appFriendshipUnblockUser: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.FriendshipApiFp(configuration).appFriendshipUnblockUser(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        }
    };
};
/**
 * FriendshipApi - object-oriented interface
 * @export
 * @class FriendshipApi
 * @extends {BaseAPI}
 */
var FriendshipApi = /** @class */ (function (_super) {
    __extends(FriendshipApi, _super);
    function FriendshipApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {AcceptFriendshipRequestInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendshipApi
     */
    FriendshipApi.prototype.appFriendshipAcceptFriendshipRequest = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.FriendshipApiFp(this.configuration).appFriendshipAcceptFriendshipRequest(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {Array<CreateFriendshipRequestInput>} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendshipApi
     */
    FriendshipApi.prototype.appFriendshipBatchCreateFriendshipRequest = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.FriendshipApiFp(this.configuration).appFriendshipBatchCreateFriendshipRequest(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {BlockUserInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendshipApi
     */
    FriendshipApi.prototype.appFriendshipBlockUser = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.FriendshipApiFp(this.configuration).appFriendshipBlockUser(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {CreateFriendshipRequestInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendshipApi
     */
    FriendshipApi.prototype.appFriendshipCreateFriendshipRequest = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.FriendshipApiFp(this.configuration).appFriendshipCreateFriendshipRequest(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {CreateFriendshipRequestByUserNameInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendshipApi
     */
    FriendshipApi.prototype.appFriendshipCreateFriendshipRequestByUserName = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.FriendshipApiFp(this.configuration).appFriendshipCreateFriendshipRequestByUserName(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {PagedAndFilteredInputDto} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendshipApi
     */
    FriendshipApi.prototype.appFriendshipGetCreateFriendshipUserList = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.FriendshipApiFp(this.configuration).appFriendshipGetCreateFriendshipUserList(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {UnblockUserInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendshipApi
     */
    FriendshipApi.prototype.appFriendshipUnblockUser = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.FriendshipApiFp(this.configuration).appFriendshipUnblockUser(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    return FriendshipApi;
}(BaseAPI));
exports.FriendshipApi = FriendshipApi;
/**
 * GeetestApi - fetch parameter creator
 * @export
 */
exports.GeetestApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {GeetestAppCheckInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appGeetestAPPCheck: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appGeetestAPPCheck.');
            }
            var localVarPath = "/api/services/app/geetest/APPCheck";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("GeetestAppCheckInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appGeetestAPPGetCaptcha: function (X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/services/app/geetest/APPGetCaptcha";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {GeetestCheckInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appGeetestCheck: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appGeetestCheck.');
            }
            var localVarPath = "/api/services/app/geetest/Check";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("GeetestCheckInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appGeetestGetCaptcha: function (X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/services/app/geetest/GetCaptcha";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * GeetestApi - functional programming interface
 * @export
 */
exports.GeetestApiFp = function (configuration) {
    return {
        /**
         *
         * @param {GeetestAppCheckInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appGeetestAPPCheck: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.GeetestApiFetchParamCreator(configuration).appGeetestAPPCheck(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appGeetestAPPGetCaptcha: function (X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.GeetestApiFetchParamCreator(configuration).appGeetestAPPGetCaptcha(X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {GeetestCheckInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appGeetestCheck: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.GeetestApiFetchParamCreator(configuration).appGeetestCheck(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appGeetestGetCaptcha: function (X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.GeetestApiFetchParamCreator(configuration).appGeetestGetCaptcha(X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        }
    };
};
/**
 * GeetestApi - factory interface
 * @export
 */
exports.GeetestApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @param {GeetestAppCheckInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appGeetestAPPCheck: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.GeetestApiFp(configuration).appGeetestAPPCheck(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appGeetestAPPGetCaptcha: function (X_XSRF_TOKEN, authorization, options) {
            return exports.GeetestApiFp(configuration).appGeetestAPPGetCaptcha(X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {GeetestCheckInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appGeetestCheck: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.GeetestApiFp(configuration).appGeetestCheck(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appGeetestGetCaptcha: function (X_XSRF_TOKEN, authorization, options) {
            return exports.GeetestApiFp(configuration).appGeetestGetCaptcha(X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        }
    };
};
/**
 * GeetestApi - object-oriented interface
 * @export
 * @class GeetestApi
 * @extends {BaseAPI}
 */
var GeetestApi = /** @class */ (function (_super) {
    __extends(GeetestApi, _super);
    function GeetestApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {GeetestAppCheckInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeetestApi
     */
    GeetestApi.prototype.appGeetestAPPCheck = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.GeetestApiFp(this.configuration).appGeetestAPPCheck(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeetestApi
     */
    GeetestApi.prototype.appGeetestAPPGetCaptcha = function (X_XSRF_TOKEN, authorization, options) {
        return exports.GeetestApiFp(this.configuration).appGeetestAPPGetCaptcha(X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {GeetestCheckInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeetestApi
     */
    GeetestApi.prototype.appGeetestCheck = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.GeetestApiFp(this.configuration).appGeetestCheck(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeetestApi
     */
    GeetestApi.prototype.appGeetestGetCaptcha = function (X_XSRF_TOKEN, authorization, options) {
        return exports.GeetestApiFp(this.configuration).appGeetestGetCaptcha(X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    return GeetestApi;
}(BaseAPI));
exports.GeetestApi = GeetestApi;
/**
 * InterfaceExportApi - fetch parameter creator
 * @export
 */
exports.InterfaceExportApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary 导出React使用的TypeScript文件
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appInterfaceExportGetReactDownloadUrl: function (X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/services/app/interfaceExport/GetReactDownloadUrl";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * InterfaceExportApi - functional programming interface
 * @export
 */
exports.InterfaceExportApiFp = function (configuration) {
    return {
        /**
         *
         * @summary 导出React使用的TypeScript文件
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appInterfaceExportGetReactDownloadUrl: function (X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.InterfaceExportApiFetchParamCreator(configuration).appInterfaceExportGetReactDownloadUrl(X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        }
    };
};
/**
 * InterfaceExportApi - factory interface
 * @export
 */
exports.InterfaceExportApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary 导出React使用的TypeScript文件
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appInterfaceExportGetReactDownloadUrl: function (X_XSRF_TOKEN, authorization, options) {
            return exports.InterfaceExportApiFp(configuration).appInterfaceExportGetReactDownloadUrl(X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        }
    };
};
/**
 * InterfaceExportApi - object-oriented interface
 * @export
 * @class InterfaceExportApi
 * @extends {BaseAPI}
 */
var InterfaceExportApi = /** @class */ (function (_super) {
    __extends(InterfaceExportApi, _super);
    function InterfaceExportApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary 导出React使用的TypeScript文件
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InterfaceExportApi
     */
    InterfaceExportApi.prototype.appInterfaceExportGetReactDownloadUrl = function (X_XSRF_TOKEN, authorization, options) {
        return exports.InterfaceExportApiFp(this.configuration).appInterfaceExportGetReactDownloadUrl(X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    return InterfaceExportApi;
}(BaseAPI));
exports.InterfaceExportApi = InterfaceExportApi;
/**
 * MenuApi - fetch parameter creator
 * @export
 */
exports.MenuApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary 创建用户自定义菜单
         * @param {CreateMenuInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMenuCreateCustomMenu: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appMenuCreateCustomMenu.');
            }
            var localVarPath = "/api/services/app/menu/CreateCustomMenu";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CreateMenuInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 创建系统菜单，开发人员使用
         * @param {CreateMenuInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMenuCreateSystemMenu: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appMenuCreateSystemMenu.');
            }
            var localVarPath = "/api/services/app/menu/CreateSystemMenu";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CreateMenuInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 删除菜单
         * @param {DeleteMenuInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMenuDeleteMenu: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appMenuDeleteMenu.');
            }
            var localVarPath = "/api/services/app/menu/DeleteMenu";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("DeleteMenuInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 获取菜单及权限
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMenuGetAllMenus: function (X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/services/app/menu/GetAllMenus";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 获取菜单及权限
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMenuGetUserMenus: function (X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/services/app/menu/GetUserMenus";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 移动菜单
         * @param {MoveMenuInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMenuMoveMenu: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appMenuMoveMenu.');
            }
            var localVarPath = "/api/services/app/menu/MoveMenu";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("MoveMenuInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 更新菜单
         * @param {UpdateMenuInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMenuUpdateMenu: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appMenuUpdateMenu.');
            }
            var localVarPath = "/api/services/app/menu/UpdateMenu";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("UpdateMenuInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * MenuApi - functional programming interface
 * @export
 */
exports.MenuApiFp = function (configuration) {
    return {
        /**
         *
         * @summary 创建用户自定义菜单
         * @param {CreateMenuInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMenuCreateCustomMenu: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.MenuApiFetchParamCreator(configuration).appMenuCreateCustomMenu(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 创建系统菜单，开发人员使用
         * @param {CreateMenuInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMenuCreateSystemMenu: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.MenuApiFetchParamCreator(configuration).appMenuCreateSystemMenu(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 删除菜单
         * @param {DeleteMenuInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMenuDeleteMenu: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.MenuApiFetchParamCreator(configuration).appMenuDeleteMenu(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 获取菜单及权限
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMenuGetAllMenus: function (X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.MenuApiFetchParamCreator(configuration).appMenuGetAllMenus(X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 获取菜单及权限
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMenuGetUserMenus: function (X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.MenuApiFetchParamCreator(configuration).appMenuGetUserMenus(X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 移动菜单
         * @param {MoveMenuInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMenuMoveMenu: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.MenuApiFetchParamCreator(configuration).appMenuMoveMenu(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 更新菜单
         * @param {UpdateMenuInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMenuUpdateMenu: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.MenuApiFetchParamCreator(configuration).appMenuUpdateMenu(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        }
    };
};
/**
 * MenuApi - factory interface
 * @export
 */
exports.MenuApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary 创建用户自定义菜单
         * @param {CreateMenuInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMenuCreateCustomMenu: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.MenuApiFp(configuration).appMenuCreateCustomMenu(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 创建系统菜单，开发人员使用
         * @param {CreateMenuInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMenuCreateSystemMenu: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.MenuApiFp(configuration).appMenuCreateSystemMenu(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 删除菜单
         * @param {DeleteMenuInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMenuDeleteMenu: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.MenuApiFp(configuration).appMenuDeleteMenu(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 获取菜单及权限
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMenuGetAllMenus: function (X_XSRF_TOKEN, authorization, options) {
            return exports.MenuApiFp(configuration).appMenuGetAllMenus(X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 获取菜单及权限
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMenuGetUserMenus: function (X_XSRF_TOKEN, authorization, options) {
            return exports.MenuApiFp(configuration).appMenuGetUserMenus(X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 移动菜单
         * @param {MoveMenuInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMenuMoveMenu: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.MenuApiFp(configuration).appMenuMoveMenu(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 更新菜单
         * @param {UpdateMenuInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMenuUpdateMenu: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.MenuApiFp(configuration).appMenuUpdateMenu(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        }
    };
};
/**
 * MenuApi - object-oriented interface
 * @export
 * @class MenuApi
 * @extends {BaseAPI}
 */
var MenuApi = /** @class */ (function (_super) {
    __extends(MenuApi, _super);
    function MenuApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary 创建用户自定义菜单
     * @param {CreateMenuInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuApi
     */
    MenuApi.prototype.appMenuCreateCustomMenu = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.MenuApiFp(this.configuration).appMenuCreateCustomMenu(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 创建系统菜单，开发人员使用
     * @param {CreateMenuInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuApi
     */
    MenuApi.prototype.appMenuCreateSystemMenu = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.MenuApiFp(this.configuration).appMenuCreateSystemMenu(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 删除菜单
     * @param {DeleteMenuInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuApi
     */
    MenuApi.prototype.appMenuDeleteMenu = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.MenuApiFp(this.configuration).appMenuDeleteMenu(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 获取菜单及权限
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuApi
     */
    MenuApi.prototype.appMenuGetAllMenus = function (X_XSRF_TOKEN, authorization, options) {
        return exports.MenuApiFp(this.configuration).appMenuGetAllMenus(X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 获取菜单及权限
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuApi
     */
    MenuApi.prototype.appMenuGetUserMenus = function (X_XSRF_TOKEN, authorization, options) {
        return exports.MenuApiFp(this.configuration).appMenuGetUserMenus(X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 移动菜单
     * @param {MoveMenuInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuApi
     */
    MenuApi.prototype.appMenuMoveMenu = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.MenuApiFp(this.configuration).appMenuMoveMenu(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 更新菜单
     * @param {UpdateMenuInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuApi
     */
    MenuApi.prototype.appMenuUpdateMenu = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.MenuApiFp(this.configuration).appMenuUpdateMenu(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    return MenuApi;
}(BaseAPI));
exports.MenuApi = MenuApi;
/**
 * MenusApi - fetch parameter creator
 * @export
 */
exports.MenusApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary 获取菜单及权限
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menusGetMenus: function (X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/Menus";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * MenusApi - functional programming interface
 * @export
 */
exports.MenusApiFp = function (configuration) {
    return {
        /**
         *
         * @summary 获取菜单及权限
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menusGetMenus: function (X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.MenusApiFetchParamCreator(configuration).menusGetMenus(X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        }
    };
};
/**
 * MenusApi - factory interface
 * @export
 */
exports.MenusApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary 获取菜单及权限
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menusGetMenus: function (X_XSRF_TOKEN, authorization, options) {
            return exports.MenusApiFp(configuration).menusGetMenus(X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        }
    };
};
/**
 * MenusApi - object-oriented interface
 * @export
 * @class MenusApi
 * @extends {BaseAPI}
 */
var MenusApi = /** @class */ (function (_super) {
    __extends(MenusApi, _super);
    function MenusApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary 获取菜单及权限
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenusApi
     */
    MenusApi.prototype.menusGetMenus = function (X_XSRF_TOKEN, authorization, options) {
        return exports.MenusApiFp(this.configuration).menusGetMenus(X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    return MenusApi;
}(BaseAPI));
exports.MenusApi = MenusApi;
/**
 * NotificationApi - fetch parameter creator
 * @export
 */
exports.NotificationApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appNotificationGetNotificationSettings: function (X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/services/app/notification/GetNotificationSettings";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {GetUserNotificationsInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appNotificationGetUserNotifications: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appNotificationGetUserNotifications.');
            }
            var localVarPath = "/api/services/app/notification/GetUserNotifications";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("GetUserNotificationsInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appNotificationSetAllNotificationsAsRead: function (X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/services/app/notification/SetAllNotificationsAsRead";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {EntityDtoGuid} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appNotificationSetNotificationAsRead: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appNotificationSetNotificationAsRead.');
            }
            var localVarPath = "/api/services/app/notification/SetNotificationAsRead";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EntityDtoGuid" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {UpdateNotificationSettingsInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appNotificationUpdateNotificationSettings: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appNotificationUpdateNotificationSettings.');
            }
            var localVarPath = "/api/services/app/notification/UpdateNotificationSettings";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("UpdateNotificationSettingsInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * NotificationApi - functional programming interface
 * @export
 */
exports.NotificationApiFp = function (configuration) {
    return {
        /**
         *
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appNotificationGetNotificationSettings: function (X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.NotificationApiFetchParamCreator(configuration).appNotificationGetNotificationSettings(X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {GetUserNotificationsInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appNotificationGetUserNotifications: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.NotificationApiFetchParamCreator(configuration).appNotificationGetUserNotifications(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appNotificationSetAllNotificationsAsRead: function (X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.NotificationApiFetchParamCreator(configuration).appNotificationSetAllNotificationsAsRead(X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {EntityDtoGuid} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appNotificationSetNotificationAsRead: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.NotificationApiFetchParamCreator(configuration).appNotificationSetNotificationAsRead(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {UpdateNotificationSettingsInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appNotificationUpdateNotificationSettings: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.NotificationApiFetchParamCreator(configuration).appNotificationUpdateNotificationSettings(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        }
    };
};
/**
 * NotificationApi - factory interface
 * @export
 */
exports.NotificationApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appNotificationGetNotificationSettings: function (X_XSRF_TOKEN, authorization, options) {
            return exports.NotificationApiFp(configuration).appNotificationGetNotificationSettings(X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {GetUserNotificationsInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appNotificationGetUserNotifications: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.NotificationApiFp(configuration).appNotificationGetUserNotifications(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appNotificationSetAllNotificationsAsRead: function (X_XSRF_TOKEN, authorization, options) {
            return exports.NotificationApiFp(configuration).appNotificationSetAllNotificationsAsRead(X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {EntityDtoGuid} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appNotificationSetNotificationAsRead: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.NotificationApiFp(configuration).appNotificationSetNotificationAsRead(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {UpdateNotificationSettingsInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appNotificationUpdateNotificationSettings: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.NotificationApiFp(configuration).appNotificationUpdateNotificationSettings(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        }
    };
};
/**
 * NotificationApi - object-oriented interface
 * @export
 * @class NotificationApi
 * @extends {BaseAPI}
 */
var NotificationApi = /** @class */ (function (_super) {
    __extends(NotificationApi, _super);
    function NotificationApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    NotificationApi.prototype.appNotificationGetNotificationSettings = function (X_XSRF_TOKEN, authorization, options) {
        return exports.NotificationApiFp(this.configuration).appNotificationGetNotificationSettings(X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {GetUserNotificationsInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    NotificationApi.prototype.appNotificationGetUserNotifications = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.NotificationApiFp(this.configuration).appNotificationGetUserNotifications(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    NotificationApi.prototype.appNotificationSetAllNotificationsAsRead = function (X_XSRF_TOKEN, authorization, options) {
        return exports.NotificationApiFp(this.configuration).appNotificationSetAllNotificationsAsRead(X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {EntityDtoGuid} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    NotificationApi.prototype.appNotificationSetNotificationAsRead = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.NotificationApiFp(this.configuration).appNotificationSetNotificationAsRead(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {UpdateNotificationSettingsInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    NotificationApi.prototype.appNotificationUpdateNotificationSettings = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.NotificationApiFp(this.configuration).appNotificationUpdateNotificationSettings(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    return NotificationApi;
}(BaseAPI));
exports.NotificationApi = NotificationApi;
/**
 * OrganizationUnitApi - fetch parameter creator
 * @export
 */
exports.OrganizationUnitApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary 将用户添加到组织机构中
         * @param {UsersToOrganizationUnitInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitAddUserToOrganizationUnit: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appOrganizationUnitAddUserToOrganizationUnit.');
            }
            var localVarPath = "/api/services/app/organizationUnit/AddUserToOrganizationUnit";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("UsersToOrganizationUnitInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 创建组织机构
         * @param {CreateOrganizationUnitInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitCreateOrganizationUnit: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appOrganizationUnitCreateOrganizationUnit.');
            }
            var localVarPath = "/api/services/app/organizationUnit/CreateOrganizationUnit";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CreateOrganizationUnitInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 删除组织机构
         * @param {EntityDtoInt64} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitDeleteOrganizationUnit: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appOrganizationUnitDeleteOrganizationUnit.');
            }
            var localVarPath = "/api/services/app/organizationUnit/DeleteOrganizationUnit";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EntityDtoInt64" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 获取可加入某组织单元的所有人员
         * @param {GetOrganizationUnitJoinableUserListInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitGetOrganizationUnitJoinableUserList: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appOrganizationUnitGetOrganizationUnitJoinableUserList.');
            }
            var localVarPath = "/api/services/app/organizationUnit/GetOrganizationUnitJoinableUserList";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("GetOrganizationUnitJoinableUserListInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 获取组织机构下的所有人员
         * @param {GetOrganizationUnitUsersInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitGetOrganizationUnitUsers: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appOrganizationUnitGetOrganizationUnitUsers.');
            }
            var localVarPath = "/api/services/app/organizationUnit/GetOrganizationUnitUsers";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("GetOrganizationUnitUsersInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 获取组织机构树
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitGetOrganizationUnits: function (X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/services/app/organizationUnit/GetOrganizationUnits";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 获取用户所在组织机构
         * @param {UserIdInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitGetUserOrganizationUnits: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appOrganizationUnitGetUserOrganizationUnits.');
            }
            var localVarPath = "/api/services/app/organizationUnit/GetUserOrganizationUnits";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("UserIdInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 用户是否属于组织机构
         * @param {UserToOrganizationUnitInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitIsInOrganizationUnit: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appOrganizationUnitIsInOrganizationUnit.');
            }
            var localVarPath = "/api/services/app/organizationUnit/IsInOrganizationUnit";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("UserToOrganizationUnitInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 移动组织机构
         * @param {MoveOrganizationUnitInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitMoveOrganizationUnit: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appOrganizationUnitMoveOrganizationUnit.');
            }
            var localVarPath = "/api/services/app/organizationUnit/MoveOrganizationUnit";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("MoveOrganizationUnitInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 移除用户的全部组织机构
         * @param {number} userId
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitRemoveAllOrganizationUnit: function (userId, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId', 'Required parameter userId was null or undefined when calling appOrganizationUnitRemoveAllOrganizationUnit.');
            }
            var localVarPath = "/api/services/app/organizationUnit/RemoveAllOrganizationUnit";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 从组织机构中移除用户
         * @param {UsersToOrganizationUnitInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitRemoveUserFromOrganizationUnit: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appOrganizationUnitRemoveUserFromOrganizationUnit.');
            }
            var localVarPath = "/api/services/app/organizationUnit/RemoveUserFromOrganizationUnit";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("UsersToOrganizationUnitInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 修改组织机构信息
         * @param {UpdateOrganizationUnitInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitUpdateOrganizationUnit: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appOrganizationUnitUpdateOrganizationUnit.');
            }
            var localVarPath = "/api/services/app/organizationUnit/UpdateOrganizationUnit";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("UpdateOrganizationUnitInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * OrganizationUnitApi - functional programming interface
 * @export
 */
exports.OrganizationUnitApiFp = function (configuration) {
    return {
        /**
         *
         * @summary 将用户添加到组织机构中
         * @param {UsersToOrganizationUnitInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitAddUserToOrganizationUnit: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.OrganizationUnitApiFetchParamCreator(configuration).appOrganizationUnitAddUserToOrganizationUnit(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 创建组织机构
         * @param {CreateOrganizationUnitInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitCreateOrganizationUnit: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.OrganizationUnitApiFetchParamCreator(configuration).appOrganizationUnitCreateOrganizationUnit(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 删除组织机构
         * @param {EntityDtoInt64} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitDeleteOrganizationUnit: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.OrganizationUnitApiFetchParamCreator(configuration).appOrganizationUnitDeleteOrganizationUnit(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 获取可加入某组织单元的所有人员
         * @param {GetOrganizationUnitJoinableUserListInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitGetOrganizationUnitJoinableUserList: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.OrganizationUnitApiFetchParamCreator(configuration).appOrganizationUnitGetOrganizationUnitJoinableUserList(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 获取组织机构下的所有人员
         * @param {GetOrganizationUnitUsersInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitGetOrganizationUnitUsers: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.OrganizationUnitApiFetchParamCreator(configuration).appOrganizationUnitGetOrganizationUnitUsers(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 获取组织机构树
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitGetOrganizationUnits: function (X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.OrganizationUnitApiFetchParamCreator(configuration).appOrganizationUnitGetOrganizationUnits(X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 获取用户所在组织机构
         * @param {UserIdInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitGetUserOrganizationUnits: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.OrganizationUnitApiFetchParamCreator(configuration).appOrganizationUnitGetUserOrganizationUnits(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 用户是否属于组织机构
         * @param {UserToOrganizationUnitInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitIsInOrganizationUnit: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.OrganizationUnitApiFetchParamCreator(configuration).appOrganizationUnitIsInOrganizationUnit(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 移动组织机构
         * @param {MoveOrganizationUnitInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitMoveOrganizationUnit: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.OrganizationUnitApiFetchParamCreator(configuration).appOrganizationUnitMoveOrganizationUnit(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 移除用户的全部组织机构
         * @param {number} userId
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitRemoveAllOrganizationUnit: function (userId, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.OrganizationUnitApiFetchParamCreator(configuration).appOrganizationUnitRemoveAllOrganizationUnit(userId, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 从组织机构中移除用户
         * @param {UsersToOrganizationUnitInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitRemoveUserFromOrganizationUnit: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.OrganizationUnitApiFetchParamCreator(configuration).appOrganizationUnitRemoveUserFromOrganizationUnit(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 修改组织机构信息
         * @param {UpdateOrganizationUnitInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitUpdateOrganizationUnit: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.OrganizationUnitApiFetchParamCreator(configuration).appOrganizationUnitUpdateOrganizationUnit(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        }
    };
};
/**
 * OrganizationUnitApi - factory interface
 * @export
 */
exports.OrganizationUnitApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary 将用户添加到组织机构中
         * @param {UsersToOrganizationUnitInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitAddUserToOrganizationUnit: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.OrganizationUnitApiFp(configuration).appOrganizationUnitAddUserToOrganizationUnit(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 创建组织机构
         * @param {CreateOrganizationUnitInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitCreateOrganizationUnit: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.OrganizationUnitApiFp(configuration).appOrganizationUnitCreateOrganizationUnit(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 删除组织机构
         * @param {EntityDtoInt64} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitDeleteOrganizationUnit: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.OrganizationUnitApiFp(configuration).appOrganizationUnitDeleteOrganizationUnit(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 获取可加入某组织单元的所有人员
         * @param {GetOrganizationUnitJoinableUserListInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitGetOrganizationUnitJoinableUserList: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.OrganizationUnitApiFp(configuration).appOrganizationUnitGetOrganizationUnitJoinableUserList(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 获取组织机构下的所有人员
         * @param {GetOrganizationUnitUsersInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitGetOrganizationUnitUsers: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.OrganizationUnitApiFp(configuration).appOrganizationUnitGetOrganizationUnitUsers(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 获取组织机构树
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitGetOrganizationUnits: function (X_XSRF_TOKEN, authorization, options) {
            return exports.OrganizationUnitApiFp(configuration).appOrganizationUnitGetOrganizationUnits(X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 获取用户所在组织机构
         * @param {UserIdInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitGetUserOrganizationUnits: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.OrganizationUnitApiFp(configuration).appOrganizationUnitGetUserOrganizationUnits(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 用户是否属于组织机构
         * @param {UserToOrganizationUnitInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitIsInOrganizationUnit: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.OrganizationUnitApiFp(configuration).appOrganizationUnitIsInOrganizationUnit(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 移动组织机构
         * @param {MoveOrganizationUnitInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitMoveOrganizationUnit: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.OrganizationUnitApiFp(configuration).appOrganizationUnitMoveOrganizationUnit(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 移除用户的全部组织机构
         * @param {number} userId
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitRemoveAllOrganizationUnit: function (userId, X_XSRF_TOKEN, authorization, options) {
            return exports.OrganizationUnitApiFp(configuration).appOrganizationUnitRemoveAllOrganizationUnit(userId, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 从组织机构中移除用户
         * @param {UsersToOrganizationUnitInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitRemoveUserFromOrganizationUnit: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.OrganizationUnitApiFp(configuration).appOrganizationUnitRemoveUserFromOrganizationUnit(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 修改组织机构信息
         * @param {UpdateOrganizationUnitInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitUpdateOrganizationUnit: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.OrganizationUnitApiFp(configuration).appOrganizationUnitUpdateOrganizationUnit(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        }
    };
};
/**
 * OrganizationUnitApi - object-oriented interface
 * @export
 * @class OrganizationUnitApi
 * @extends {BaseAPI}
 */
var OrganizationUnitApi = /** @class */ (function (_super) {
    __extends(OrganizationUnitApi, _super);
    function OrganizationUnitApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary 将用户添加到组织机构中
     * @param {UsersToOrganizationUnitInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUnitApi
     */
    OrganizationUnitApi.prototype.appOrganizationUnitAddUserToOrganizationUnit = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.OrganizationUnitApiFp(this.configuration).appOrganizationUnitAddUserToOrganizationUnit(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 创建组织机构
     * @param {CreateOrganizationUnitInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUnitApi
     */
    OrganizationUnitApi.prototype.appOrganizationUnitCreateOrganizationUnit = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.OrganizationUnitApiFp(this.configuration).appOrganizationUnitCreateOrganizationUnit(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 删除组织机构
     * @param {EntityDtoInt64} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUnitApi
     */
    OrganizationUnitApi.prototype.appOrganizationUnitDeleteOrganizationUnit = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.OrganizationUnitApiFp(this.configuration).appOrganizationUnitDeleteOrganizationUnit(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 获取可加入某组织单元的所有人员
     * @param {GetOrganizationUnitJoinableUserListInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUnitApi
     */
    OrganizationUnitApi.prototype.appOrganizationUnitGetOrganizationUnitJoinableUserList = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.OrganizationUnitApiFp(this.configuration).appOrganizationUnitGetOrganizationUnitJoinableUserList(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 获取组织机构下的所有人员
     * @param {GetOrganizationUnitUsersInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUnitApi
     */
    OrganizationUnitApi.prototype.appOrganizationUnitGetOrganizationUnitUsers = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.OrganizationUnitApiFp(this.configuration).appOrganizationUnitGetOrganizationUnitUsers(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 获取组织机构树
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUnitApi
     */
    OrganizationUnitApi.prototype.appOrganizationUnitGetOrganizationUnits = function (X_XSRF_TOKEN, authorization, options) {
        return exports.OrganizationUnitApiFp(this.configuration).appOrganizationUnitGetOrganizationUnits(X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 获取用户所在组织机构
     * @param {UserIdInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUnitApi
     */
    OrganizationUnitApi.prototype.appOrganizationUnitGetUserOrganizationUnits = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.OrganizationUnitApiFp(this.configuration).appOrganizationUnitGetUserOrganizationUnits(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 用户是否属于组织机构
     * @param {UserToOrganizationUnitInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUnitApi
     */
    OrganizationUnitApi.prototype.appOrganizationUnitIsInOrganizationUnit = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.OrganizationUnitApiFp(this.configuration).appOrganizationUnitIsInOrganizationUnit(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 移动组织机构
     * @param {MoveOrganizationUnitInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUnitApi
     */
    OrganizationUnitApi.prototype.appOrganizationUnitMoveOrganizationUnit = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.OrganizationUnitApiFp(this.configuration).appOrganizationUnitMoveOrganizationUnit(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 移除用户的全部组织机构
     * @param {number} userId
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUnitApi
     */
    OrganizationUnitApi.prototype.appOrganizationUnitRemoveAllOrganizationUnit = function (userId, X_XSRF_TOKEN, authorization, options) {
        return exports.OrganizationUnitApiFp(this.configuration).appOrganizationUnitRemoveAllOrganizationUnit(userId, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 从组织机构中移除用户
     * @param {UsersToOrganizationUnitInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUnitApi
     */
    OrganizationUnitApi.prototype.appOrganizationUnitRemoveUserFromOrganizationUnit = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.OrganizationUnitApiFp(this.configuration).appOrganizationUnitRemoveUserFromOrganizationUnit(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 修改组织机构信息
     * @param {UpdateOrganizationUnitInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUnitApi
     */
    OrganizationUnitApi.prototype.appOrganizationUnitUpdateOrganizationUnit = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.OrganizationUnitApiFp(this.configuration).appOrganizationUnitUpdateOrganizationUnit(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    return OrganizationUnitApi;
}(BaseAPI));
exports.OrganizationUnitApi = OrganizationUnitApi;
/**
 * PermissionApi - fetch parameter creator
 * @export
 */
exports.PermissionApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary 获取权限树
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appPermissionGetAllPermissionTree: function (X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/services/app/permission/GetAllPermissionTree";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 获取所有权限
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appPermissionGetAllPermissions: function (X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/services/app/permission/GetAllPermissions";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 获取登录用户所有权值
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appPermissionGetUserPermissions: function (X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/services/app/permission/GetUserPermissions";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * PermissionApi - functional programming interface
 * @export
 */
exports.PermissionApiFp = function (configuration) {
    return {
        /**
         *
         * @summary 获取权限树
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appPermissionGetAllPermissionTree: function (X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.PermissionApiFetchParamCreator(configuration).appPermissionGetAllPermissionTree(X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 获取所有权限
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appPermissionGetAllPermissions: function (X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.PermissionApiFetchParamCreator(configuration).appPermissionGetAllPermissions(X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 获取登录用户所有权值
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appPermissionGetUserPermissions: function (X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.PermissionApiFetchParamCreator(configuration).appPermissionGetUserPermissions(X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        }
    };
};
/**
 * PermissionApi - factory interface
 * @export
 */
exports.PermissionApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary 获取权限树
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appPermissionGetAllPermissionTree: function (X_XSRF_TOKEN, authorization, options) {
            return exports.PermissionApiFp(configuration).appPermissionGetAllPermissionTree(X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 获取所有权限
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appPermissionGetAllPermissions: function (X_XSRF_TOKEN, authorization, options) {
            return exports.PermissionApiFp(configuration).appPermissionGetAllPermissions(X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 获取登录用户所有权值
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appPermissionGetUserPermissions: function (X_XSRF_TOKEN, authorization, options) {
            return exports.PermissionApiFp(configuration).appPermissionGetUserPermissions(X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        }
    };
};
/**
 * PermissionApi - object-oriented interface
 * @export
 * @class PermissionApi
 * @extends {BaseAPI}
 */
var PermissionApi = /** @class */ (function (_super) {
    __extends(PermissionApi, _super);
    function PermissionApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary 获取权限树
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionApi
     */
    PermissionApi.prototype.appPermissionGetAllPermissionTree = function (X_XSRF_TOKEN, authorization, options) {
        return exports.PermissionApiFp(this.configuration).appPermissionGetAllPermissionTree(X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 获取所有权限
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionApi
     */
    PermissionApi.prototype.appPermissionGetAllPermissions = function (X_XSRF_TOKEN, authorization, options) {
        return exports.PermissionApiFp(this.configuration).appPermissionGetAllPermissions(X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 获取登录用户所有权值
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionApi
     */
    PermissionApi.prototype.appPermissionGetUserPermissions = function (X_XSRF_TOKEN, authorization, options) {
        return exports.PermissionApiFp(this.configuration).appPermissionGetUserPermissions(X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    return PermissionApi;
}(BaseAPI));
exports.PermissionApi = PermissionApi;
/**
 * ProfileApi - fetch parameter creator
 * @export
 */
exports.ProfileApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary 修改自己的密码
         * @param {ChangePasswordInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appProfileChangePassword: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appProfileChangePassword.');
            }
            var localVarPath = "/api/services/app/profile/ChangePassword";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ChangePasswordInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 管理员修改别人的密码
         * @param {ChangeUserPasswordInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appProfileChangeUserPassword: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appProfileChangeUserPassword.');
            }
            var localVarPath = "/api/services/app/profile/ChangeUserPassword";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ChangeUserPasswordInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 编辑前，获取用户的基本信息
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appProfileGetCurrentUserProfileForEdit: function (X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/services/app/profile/GetCurrentUserProfileForEdit";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 获取密码复杂性设置
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appProfileGetPasswordComplexitySetting: function (X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/services/app/profile/GetPasswordComplexitySetting";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 管理员重置别人的密码
         * @param {EntityDtoInt64} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appProfileResetUserPassword: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appProfileResetUserPassword.');
            }
            var localVarPath = "/api/services/app/profile/ResetUserPassword";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EntityDtoInt64" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 编辑用户的基本信息
         * @param {CurrentUserProfileEditDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appProfileUpdateCurrentUserProfile: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appProfileUpdateCurrentUserProfile.');
            }
            var localVarPath = "/api/services/app/profile/UpdateCurrentUserProfile";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CurrentUserProfileEditDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 修改头像
         * @param {UpdateProfilePictureInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appProfileUpdateProfilePicture: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appProfileUpdateProfilePicture.');
            }
            var localVarPath = "/api/services/app/profile/UpdateProfilePicture";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("UpdateProfilePictureInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * ProfileApi - functional programming interface
 * @export
 */
exports.ProfileApiFp = function (configuration) {
    return {
        /**
         *
         * @summary 修改自己的密码
         * @param {ChangePasswordInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appProfileChangePassword: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.ProfileApiFetchParamCreator(configuration).appProfileChangePassword(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 管理员修改别人的密码
         * @param {ChangeUserPasswordInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appProfileChangeUserPassword: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.ProfileApiFetchParamCreator(configuration).appProfileChangeUserPassword(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 编辑前，获取用户的基本信息
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appProfileGetCurrentUserProfileForEdit: function (X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.ProfileApiFetchParamCreator(configuration).appProfileGetCurrentUserProfileForEdit(X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 获取密码复杂性设置
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appProfileGetPasswordComplexitySetting: function (X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.ProfileApiFetchParamCreator(configuration).appProfileGetPasswordComplexitySetting(X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 管理员重置别人的密码
         * @param {EntityDtoInt64} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appProfileResetUserPassword: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.ProfileApiFetchParamCreator(configuration).appProfileResetUserPassword(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 编辑用户的基本信息
         * @param {CurrentUserProfileEditDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appProfileUpdateCurrentUserProfile: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.ProfileApiFetchParamCreator(configuration).appProfileUpdateCurrentUserProfile(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 修改头像
         * @param {UpdateProfilePictureInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appProfileUpdateProfilePicture: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.ProfileApiFetchParamCreator(configuration).appProfileUpdateProfilePicture(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        }
    };
};
/**
 * ProfileApi - factory interface
 * @export
 */
exports.ProfileApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary 修改自己的密码
         * @param {ChangePasswordInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appProfileChangePassword: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.ProfileApiFp(configuration).appProfileChangePassword(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 管理员修改别人的密码
         * @param {ChangeUserPasswordInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appProfileChangeUserPassword: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.ProfileApiFp(configuration).appProfileChangeUserPassword(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 编辑前，获取用户的基本信息
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appProfileGetCurrentUserProfileForEdit: function (X_XSRF_TOKEN, authorization, options) {
            return exports.ProfileApiFp(configuration).appProfileGetCurrentUserProfileForEdit(X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 获取密码复杂性设置
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appProfileGetPasswordComplexitySetting: function (X_XSRF_TOKEN, authorization, options) {
            return exports.ProfileApiFp(configuration).appProfileGetPasswordComplexitySetting(X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 管理员重置别人的密码
         * @param {EntityDtoInt64} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appProfileResetUserPassword: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.ProfileApiFp(configuration).appProfileResetUserPassword(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 编辑用户的基本信息
         * @param {CurrentUserProfileEditDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appProfileUpdateCurrentUserProfile: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.ProfileApiFp(configuration).appProfileUpdateCurrentUserProfile(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 修改头像
         * @param {UpdateProfilePictureInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appProfileUpdateProfilePicture: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.ProfileApiFp(configuration).appProfileUpdateProfilePicture(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        }
    };
};
/**
 * ProfileApi - object-oriented interface
 * @export
 * @class ProfileApi
 * @extends {BaseAPI}
 */
var ProfileApi = /** @class */ (function (_super) {
    __extends(ProfileApi, _super);
    function ProfileApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary 修改自己的密码
     * @param {ChangePasswordInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    ProfileApi.prototype.appProfileChangePassword = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.ProfileApiFp(this.configuration).appProfileChangePassword(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 管理员修改别人的密码
     * @param {ChangeUserPasswordInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    ProfileApi.prototype.appProfileChangeUserPassword = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.ProfileApiFp(this.configuration).appProfileChangeUserPassword(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 编辑前，获取用户的基本信息
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    ProfileApi.prototype.appProfileGetCurrentUserProfileForEdit = function (X_XSRF_TOKEN, authorization, options) {
        return exports.ProfileApiFp(this.configuration).appProfileGetCurrentUserProfileForEdit(X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 获取密码复杂性设置
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    ProfileApi.prototype.appProfileGetPasswordComplexitySetting = function (X_XSRF_TOKEN, authorization, options) {
        return exports.ProfileApiFp(this.configuration).appProfileGetPasswordComplexitySetting(X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 管理员重置别人的密码
     * @param {EntityDtoInt64} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    ProfileApi.prototype.appProfileResetUserPassword = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.ProfileApiFp(this.configuration).appProfileResetUserPassword(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 编辑用户的基本信息
     * @param {CurrentUserProfileEditDto} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    ProfileApi.prototype.appProfileUpdateCurrentUserProfile = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.ProfileApiFp(this.configuration).appProfileUpdateCurrentUserProfile(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 修改头像
     * @param {UpdateProfilePictureInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    ProfileApi.prototype.appProfileUpdateProfilePicture = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.ProfileApiFp(this.configuration).appProfileUpdateProfilePicture(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    return ProfileApi;
}(BaseAPI));
exports.ProfileApi = ProfileApi;
/**
 * RegisterApi - fetch parameter creator
 * @export
 */
exports.RegisterApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary 注册
         * @param {RegisterInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRegisterRegister: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appRegisterRegister.');
            }
            var localVarPath = "/api/services/app/register/Register";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("RegisterInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 通过邮箱注册
         * @param {RegisterByEmailInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRegisterRegisterByEmail: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appRegisterRegisterByEmail.');
            }
            var localVarPath = "/api/services/app/register/RegisterByEmail";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("RegisterByEmailInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 通过手机号注册
         * @param {RegisterByPhoneNumberInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRegisterRegisterByPhoneNumber: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appRegisterRegisterByPhoneNumber.');
            }
            var localVarPath = "/api/services/app/register/RegisterByPhoneNumber";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("RegisterByPhoneNumberInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 通过手机号注册（只有手机号）
         * @param {RegisterOnlyPhoneNumberInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRegisterRegisterOnlyPhoneNumber: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appRegisterRegisterOnlyPhoneNumber.');
            }
            var localVarPath = "/api/services/app/register/RegisterOnlyPhoneNumber";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("RegisterOnlyPhoneNumberInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 发送邮箱验证码     (使用者：registerByEmail)
         * @param {SendConfirmEmailByCaptchaInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRegisterSendEmailCode: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appRegisterSendEmailCode.');
            }
            var localVarPath = "/api/services/app/register/SendEmailCode";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("SendConfirmEmailByCaptchaInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 注册时发送手机证码    （register）
         * @param {PhoneWithCaptchaInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRegisterSendPhoneNumberCode: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appRegisterSendPhoneNumberCode.');
            }
            var localVarPath = "/api/services/app/register/SendPhoneNumberCode";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("PhoneWithCaptchaInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * RegisterApi - functional programming interface
 * @export
 */
exports.RegisterApiFp = function (configuration) {
    return {
        /**
         *
         * @summary 注册
         * @param {RegisterInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRegisterRegister: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.RegisterApiFetchParamCreator(configuration).appRegisterRegister(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 通过邮箱注册
         * @param {RegisterByEmailInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRegisterRegisterByEmail: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.RegisterApiFetchParamCreator(configuration).appRegisterRegisterByEmail(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 通过手机号注册
         * @param {RegisterByPhoneNumberInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRegisterRegisterByPhoneNumber: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.RegisterApiFetchParamCreator(configuration).appRegisterRegisterByPhoneNumber(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 通过手机号注册（只有手机号）
         * @param {RegisterOnlyPhoneNumberInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRegisterRegisterOnlyPhoneNumber: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.RegisterApiFetchParamCreator(configuration).appRegisterRegisterOnlyPhoneNumber(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 发送邮箱验证码     (使用者：registerByEmail)
         * @param {SendConfirmEmailByCaptchaInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRegisterSendEmailCode: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.RegisterApiFetchParamCreator(configuration).appRegisterSendEmailCode(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 注册时发送手机证码    （register）
         * @param {PhoneWithCaptchaInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRegisterSendPhoneNumberCode: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.RegisterApiFetchParamCreator(configuration).appRegisterSendPhoneNumberCode(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        }
    };
};
/**
 * RegisterApi - factory interface
 * @export
 */
exports.RegisterApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary 注册
         * @param {RegisterInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRegisterRegister: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.RegisterApiFp(configuration).appRegisterRegister(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 通过邮箱注册
         * @param {RegisterByEmailInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRegisterRegisterByEmail: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.RegisterApiFp(configuration).appRegisterRegisterByEmail(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 通过手机号注册
         * @param {RegisterByPhoneNumberInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRegisterRegisterByPhoneNumber: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.RegisterApiFp(configuration).appRegisterRegisterByPhoneNumber(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 通过手机号注册（只有手机号）
         * @param {RegisterOnlyPhoneNumberInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRegisterRegisterOnlyPhoneNumber: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.RegisterApiFp(configuration).appRegisterRegisterOnlyPhoneNumber(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 发送邮箱验证码     (使用者：registerByEmail)
         * @param {SendConfirmEmailByCaptchaInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRegisterSendEmailCode: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.RegisterApiFp(configuration).appRegisterSendEmailCode(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 注册时发送手机证码    （register）
         * @param {PhoneWithCaptchaInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRegisterSendPhoneNumberCode: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.RegisterApiFp(configuration).appRegisterSendPhoneNumberCode(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        }
    };
};
/**
 * RegisterApi - object-oriented interface
 * @export
 * @class RegisterApi
 * @extends {BaseAPI}
 */
var RegisterApi = /** @class */ (function (_super) {
    __extends(RegisterApi, _super);
    function RegisterApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary 注册
     * @param {RegisterInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegisterApi
     */
    RegisterApi.prototype.appRegisterRegister = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.RegisterApiFp(this.configuration).appRegisterRegister(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 通过邮箱注册
     * @param {RegisterByEmailInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegisterApi
     */
    RegisterApi.prototype.appRegisterRegisterByEmail = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.RegisterApiFp(this.configuration).appRegisterRegisterByEmail(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 通过手机号注册
     * @param {RegisterByPhoneNumberInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegisterApi
     */
    RegisterApi.prototype.appRegisterRegisterByPhoneNumber = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.RegisterApiFp(this.configuration).appRegisterRegisterByPhoneNumber(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 通过手机号注册（只有手机号）
     * @param {RegisterOnlyPhoneNumberInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegisterApi
     */
    RegisterApi.prototype.appRegisterRegisterOnlyPhoneNumber = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.RegisterApiFp(this.configuration).appRegisterRegisterOnlyPhoneNumber(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 发送邮箱验证码     (使用者：registerByEmail)
     * @param {SendConfirmEmailByCaptchaInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegisterApi
     */
    RegisterApi.prototype.appRegisterSendEmailCode = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.RegisterApiFp(this.configuration).appRegisterSendEmailCode(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 注册时发送手机证码    （register）
     * @param {PhoneWithCaptchaInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegisterApi
     */
    RegisterApi.prototype.appRegisterSendPhoneNumberCode = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.RegisterApiFp(this.configuration).appRegisterSendPhoneNumberCode(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    return RegisterApi;
}(BaseAPI));
exports.RegisterApi = RegisterApi;
/**
 * RestPasswordApi - fetch parameter creator
 * @export
 */
exports.RestPasswordApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary 通过邮箱找回密码  （backknow）
         * @param {ResetPasswordByEmailInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRestPasswordResetPasswordByEmail: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appRestPasswordResetPasswordByEmail.');
            }
            var localVarPath = "/api/services/app/restPassword/ResetPasswordByEmail";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ResetPasswordByEmailInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 通过手机号找回密码  （callback）
         * @param {ResetPasswordByPhoneNumberInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRestPasswordResetPasswordByPhoneNumber: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appRestPasswordResetPasswordByPhoneNumber.');
            }
            var localVarPath = "/api/services/app/restPassword/ResetPasswordByPhoneNumber";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ResetPasswordByPhoneNumberInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 发送邮箱验证码     (使用者：backknow)
         * @param {SendConfirmEmailByCaptchaInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRestPasswordSendEmailCode: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appRestPasswordSendEmailCode.');
            }
            var localVarPath = "/api/services/app/restPassword/SendEmailCode";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("SendConfirmEmailByCaptchaInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 注册时发送手机证码    （callback）
         * @param {PhoneWithCaptchaInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRestPasswordSendPhoneNumberCode: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appRestPasswordSendPhoneNumberCode.');
            }
            var localVarPath = "/api/services/app/restPassword/SendPhoneNumberCode";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("PhoneWithCaptchaInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * RestPasswordApi - functional programming interface
 * @export
 */
exports.RestPasswordApiFp = function (configuration) {
    return {
        /**
         *
         * @summary 通过邮箱找回密码  （backknow）
         * @param {ResetPasswordByEmailInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRestPasswordResetPasswordByEmail: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.RestPasswordApiFetchParamCreator(configuration).appRestPasswordResetPasswordByEmail(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 通过手机号找回密码  （callback）
         * @param {ResetPasswordByPhoneNumberInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRestPasswordResetPasswordByPhoneNumber: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.RestPasswordApiFetchParamCreator(configuration).appRestPasswordResetPasswordByPhoneNumber(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 发送邮箱验证码     (使用者：backknow)
         * @param {SendConfirmEmailByCaptchaInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRestPasswordSendEmailCode: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.RestPasswordApiFetchParamCreator(configuration).appRestPasswordSendEmailCode(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 注册时发送手机证码    （callback）
         * @param {PhoneWithCaptchaInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRestPasswordSendPhoneNumberCode: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.RestPasswordApiFetchParamCreator(configuration).appRestPasswordSendPhoneNumberCode(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        }
    };
};
/**
 * RestPasswordApi - factory interface
 * @export
 */
exports.RestPasswordApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary 通过邮箱找回密码  （backknow）
         * @param {ResetPasswordByEmailInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRestPasswordResetPasswordByEmail: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.RestPasswordApiFp(configuration).appRestPasswordResetPasswordByEmail(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 通过手机号找回密码  （callback）
         * @param {ResetPasswordByPhoneNumberInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRestPasswordResetPasswordByPhoneNumber: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.RestPasswordApiFp(configuration).appRestPasswordResetPasswordByPhoneNumber(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 发送邮箱验证码     (使用者：backknow)
         * @param {SendConfirmEmailByCaptchaInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRestPasswordSendEmailCode: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.RestPasswordApiFp(configuration).appRestPasswordSendEmailCode(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 注册时发送手机证码    （callback）
         * @param {PhoneWithCaptchaInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRestPasswordSendPhoneNumberCode: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.RestPasswordApiFp(configuration).appRestPasswordSendPhoneNumberCode(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        }
    };
};
/**
 * RestPasswordApi - object-oriented interface
 * @export
 * @class RestPasswordApi
 * @extends {BaseAPI}
 */
var RestPasswordApi = /** @class */ (function (_super) {
    __extends(RestPasswordApi, _super);
    function RestPasswordApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary 通过邮箱找回密码  （backknow）
     * @param {ResetPasswordByEmailInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestPasswordApi
     */
    RestPasswordApi.prototype.appRestPasswordResetPasswordByEmail = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.RestPasswordApiFp(this.configuration).appRestPasswordResetPasswordByEmail(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 通过手机号找回密码  （callback）
     * @param {ResetPasswordByPhoneNumberInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestPasswordApi
     */
    RestPasswordApi.prototype.appRestPasswordResetPasswordByPhoneNumber = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.RestPasswordApiFp(this.configuration).appRestPasswordResetPasswordByPhoneNumber(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 发送邮箱验证码     (使用者：backknow)
     * @param {SendConfirmEmailByCaptchaInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestPasswordApi
     */
    RestPasswordApi.prototype.appRestPasswordSendEmailCode = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.RestPasswordApiFp(this.configuration).appRestPasswordSendEmailCode(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 注册时发送手机证码    （callback）
     * @param {PhoneWithCaptchaInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestPasswordApi
     */
    RestPasswordApi.prototype.appRestPasswordSendPhoneNumberCode = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.RestPasswordApiFp(this.configuration).appRestPasswordSendPhoneNumberCode(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    return RestPasswordApi;
}(BaseAPI));
exports.RestPasswordApi = RestPasswordApi;
/**
 * RoleApi - fetch parameter creator
 * @export
 */
exports.RoleApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary 创建或修改角色
         * @param {CreateOrUpdateRoleInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRoleCreateOrUpdateRole: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appRoleCreateOrUpdateRole.');
            }
            var localVarPath = "/api/services/app/role/CreateOrUpdateRole";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CreateOrUpdateRoleInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 删除角色
         * @param {EntityDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRoleDeleteRole: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appRoleDeleteRole.');
            }
            var localVarPath = "/api/services/app/role/DeleteRole";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EntityDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 获取编辑时需要的角色信息
         * @param {NullableIdDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRoleGetRoleForEdit: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appRoleGetRoleForEdit.');
            }
            var localVarPath = "/api/services/app/role/GetRoleForEdit";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("NullableIdDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 获取角色列表
         * @param {GetRolesInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRoleGetRoles: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appRoleGetRoles.');
            }
            var localVarPath = "/api/services/app/role/GetRoles";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("GetRolesInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * RoleApi - functional programming interface
 * @export
 */
exports.RoleApiFp = function (configuration) {
    return {
        /**
         *
         * @summary 创建或修改角色
         * @param {CreateOrUpdateRoleInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRoleCreateOrUpdateRole: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.RoleApiFetchParamCreator(configuration).appRoleCreateOrUpdateRole(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 删除角色
         * @param {EntityDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRoleDeleteRole: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.RoleApiFetchParamCreator(configuration).appRoleDeleteRole(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 获取编辑时需要的角色信息
         * @param {NullableIdDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRoleGetRoleForEdit: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.RoleApiFetchParamCreator(configuration).appRoleGetRoleForEdit(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 获取角色列表
         * @param {GetRolesInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRoleGetRoles: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.RoleApiFetchParamCreator(configuration).appRoleGetRoles(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        }
    };
};
/**
 * RoleApi - factory interface
 * @export
 */
exports.RoleApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary 创建或修改角色
         * @param {CreateOrUpdateRoleInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRoleCreateOrUpdateRole: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.RoleApiFp(configuration).appRoleCreateOrUpdateRole(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 删除角色
         * @param {EntityDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRoleDeleteRole: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.RoleApiFp(configuration).appRoleDeleteRole(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 获取编辑时需要的角色信息
         * @param {NullableIdDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRoleGetRoleForEdit: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.RoleApiFp(configuration).appRoleGetRoleForEdit(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 获取角色列表
         * @param {GetRolesInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRoleGetRoles: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.RoleApiFp(configuration).appRoleGetRoles(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        }
    };
};
/**
 * RoleApi - object-oriented interface
 * @export
 * @class RoleApi
 * @extends {BaseAPI}
 */
var RoleApi = /** @class */ (function (_super) {
    __extends(RoleApi, _super);
    function RoleApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary 创建或修改角色
     * @param {CreateOrUpdateRoleInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    RoleApi.prototype.appRoleCreateOrUpdateRole = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.RoleApiFp(this.configuration).appRoleCreateOrUpdateRole(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 删除角色
     * @param {EntityDto} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    RoleApi.prototype.appRoleDeleteRole = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.RoleApiFp(this.configuration).appRoleDeleteRole(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 获取编辑时需要的角色信息
     * @param {NullableIdDto} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    RoleApi.prototype.appRoleGetRoleForEdit = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.RoleApiFp(this.configuration).appRoleGetRoleForEdit(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 获取角色列表
     * @param {GetRolesInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    RoleApi.prototype.appRoleGetRoles = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.RoleApiFp(this.configuration).appRoleGetRoles(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    return RoleApi;
}(BaseAPI));
exports.RoleApi = RoleApi;
/**
 * SMSLoginApi - fetch parameter creator
 * @export
 */
exports.SMSLoginApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary 手机短信登录认证
         * @param {LoginForSmsCode} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sMSLoginAuthenticate: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling sMSLoginAuthenticate.');
            }
            var localVarPath = "/api/SMSLogin";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("LoginForSmsCode" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * SMSLoginApi - functional programming interface
 * @export
 */
exports.SMSLoginApiFp = function (configuration) {
    return {
        /**
         *
         * @summary 手机短信登录认证
         * @param {LoginForSmsCode} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sMSLoginAuthenticate: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.SMSLoginApiFetchParamCreator(configuration).sMSLoginAuthenticate(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        }
    };
};
/**
 * SMSLoginApi - factory interface
 * @export
 */
exports.SMSLoginApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary 手机短信登录认证
         * @param {LoginForSmsCode} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sMSLoginAuthenticate: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.SMSLoginApiFp(configuration).sMSLoginAuthenticate(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        }
    };
};
/**
 * SMSLoginApi - object-oriented interface
 * @export
 * @class SMSLoginApi
 * @extends {BaseAPI}
 */
var SMSLoginApi = /** @class */ (function (_super) {
    __extends(SMSLoginApi, _super);
    function SMSLoginApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary 手机短信登录认证
     * @param {LoginForSmsCode} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SMSLoginApi
     */
    SMSLoginApi.prototype.sMSLoginAuthenticate = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.SMSLoginApiFp(this.configuration).sMSLoginAuthenticate(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    return SMSLoginApi;
}(BaseAPI));
exports.SMSLoginApi = SMSLoginApi;
/**
 * SessionApi - fetch parameter creator
 * @export
 */
exports.SessionApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appSessionGetCurrentLoginInformations: function (X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/services/app/session/GetCurrentLoginInformations";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * SessionApi - functional programming interface
 * @export
 */
exports.SessionApiFp = function (configuration) {
    return {
        /**
         *
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appSessionGetCurrentLoginInformations: function (X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.SessionApiFetchParamCreator(configuration).appSessionGetCurrentLoginInformations(X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        }
    };
};
/**
 * SessionApi - factory interface
 * @export
 */
exports.SessionApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appSessionGetCurrentLoginInformations: function (X_XSRF_TOKEN, authorization, options) {
            return exports.SessionApiFp(configuration).appSessionGetCurrentLoginInformations(X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        }
    };
};
/**
 * SessionApi - object-oriented interface
 * @export
 * @class SessionApi
 * @extends {BaseAPI}
 */
var SessionApi = /** @class */ (function (_super) {
    __extends(SessionApi, _super);
    function SessionApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    SessionApi.prototype.appSessionGetCurrentLoginInformations = function (X_XSRF_TOKEN, authorization, options) {
        return exports.SessionApiFp(this.configuration).appSessionGetCurrentLoginInformations(X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    return SessionApi;
}(BaseAPI));
exports.SessionApi = SessionApi;
/**
 * ThirdPartyLoginForTokenApi - fetch parameter creator
 * @export
 */
exports.ThirdPartyLoginForTokenApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary 第三方登录   返回token
         * @param {ThirdPartyLoginModel} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        thirdPartyLoginForTokenAuthenticate: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling thirdPartyLoginForTokenAuthenticate.');
            }
            var localVarPath = "/api/ThirdPartyLoginForToken";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ThirdPartyLoginModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * ThirdPartyLoginForTokenApi - functional programming interface
 * @export
 */
exports.ThirdPartyLoginForTokenApiFp = function (configuration) {
    return {
        /**
         *
         * @summary 第三方登录   返回token
         * @param {ThirdPartyLoginModel} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        thirdPartyLoginForTokenAuthenticate: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.ThirdPartyLoginForTokenApiFetchParamCreator(configuration).thirdPartyLoginForTokenAuthenticate(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        }
    };
};
/**
 * ThirdPartyLoginForTokenApi - factory interface
 * @export
 */
exports.ThirdPartyLoginForTokenApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary 第三方登录   返回token
         * @param {ThirdPartyLoginModel} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        thirdPartyLoginForTokenAuthenticate: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.ThirdPartyLoginForTokenApiFp(configuration).thirdPartyLoginForTokenAuthenticate(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        }
    };
};
/**
 * ThirdPartyLoginForTokenApi - object-oriented interface
 * @export
 * @class ThirdPartyLoginForTokenApi
 * @extends {BaseAPI}
 */
var ThirdPartyLoginForTokenApi = /** @class */ (function (_super) {
    __extends(ThirdPartyLoginForTokenApi, _super);
    function ThirdPartyLoginForTokenApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary 第三方登录   返回token
     * @param {ThirdPartyLoginModel} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThirdPartyLoginForTokenApi
     */
    ThirdPartyLoginForTokenApi.prototype.thirdPartyLoginForTokenAuthenticate = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.ThirdPartyLoginForTokenApiFp(this.configuration).thirdPartyLoginForTokenAuthenticate(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    return ThirdPartyLoginForTokenApi;
}(BaseAPI));
exports.ThirdPartyLoginForTokenApi = ThirdPartyLoginForTokenApi;
/**
 * TypeScriptApi - fetch parameter creator
 * @export
 */
exports.TypeScriptApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {boolean} [isCompleteService]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        typeScriptGet: function (X_XSRF_TOKEN, authorization, isCompleteService, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/TypeScript";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (isCompleteService !== undefined) {
                localVarQueryParameter['isCompleteService'] = isCompleteService;
            }
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * TypeScriptApi - functional programming interface
 * @export
 */
exports.TypeScriptApiFp = function (configuration) {
    return {
        /**
         *
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {boolean} [isCompleteService]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        typeScriptGet: function (X_XSRF_TOKEN, authorization, isCompleteService, options) {
            var localVarFetchArgs = exports.TypeScriptApiFetchParamCreator(configuration).typeScriptGet(X_XSRF_TOKEN, authorization, isCompleteService, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        }
    };
};
/**
 * TypeScriptApi - factory interface
 * @export
 */
exports.TypeScriptApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {boolean} [isCompleteService]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        typeScriptGet: function (X_XSRF_TOKEN, authorization, isCompleteService, options) {
            return exports.TypeScriptApiFp(configuration).typeScriptGet(X_XSRF_TOKEN, authorization, isCompleteService, options)(fetch, basePath);
        }
    };
};
/**
 * TypeScriptApi - object-oriented interface
 * @export
 * @class TypeScriptApi
 * @extends {BaseAPI}
 */
var TypeScriptApi = /** @class */ (function (_super) {
    __extends(TypeScriptApi, _super);
    function TypeScriptApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {boolean} [isCompleteService]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TypeScriptApi
     */
    TypeScriptApi.prototype.typeScriptGet = function (X_XSRF_TOKEN, authorization, isCompleteService, options) {
        return exports.TypeScriptApiFp(this.configuration).typeScriptGet(X_XSRF_TOKEN, authorization, isCompleteService, options)(this.fetch, this.basePath);
    };
    return TypeScriptApi;
}(BaseAPI));
exports.TypeScriptApi = TypeScriptApi;
/**
 * UserApi - fetch parameter creator
 * @export
 */
exports.UserApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary 批量激活用户
         * @param {BatchActiveUserInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserBatchActiveUser: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appUserBatchActiveUser.');
            }
            var localVarPath = "/api/services/app/user/BatchActiveUser";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("BatchActiveUserInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 批量删除用户
         * @param {ArrayDtoInt64} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserBatchDeleteUser: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appUserBatchDeleteUser.');
            }
            var localVarPath = "/api/services/app/user/BatchDeleteUser";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ArrayDtoInt64" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 批量解锁用户
         * @param {ArrayDtoInt64} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserBatchUnlockUser: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appUserBatchUnlockUser.');
            }
            var localVarPath = "/api/services/app/user/BatchUnlockUser";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ArrayDtoInt64" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 创建或编辑用户，Id为空时创建，否则编辑
         * @param {CreateOrUpdateUserInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserCreateOrUpdateUser: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appUserCreateOrUpdateUser.');
            }
            var localVarPath = "/api/services/app/user/CreateOrUpdateUser";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CreateOrUpdateUserInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 删除用户
         * @param {EntityDtoInt64} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserDeleteUser: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appUserDeleteUser.');
            }
            var localVarPath = "/api/services/app/user/DeleteUser";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EntityDtoInt64" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 获取全部的角色
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserGetRoles: function (X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/services/app/user/GetRoles";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 获取编辑时需要的单个用户信息
         * @param {NullableIdDtoInt64} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserGetUserForEdit: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appUserGetUserForEdit.');
            }
            var localVarPath = "/api/services/app/user/GetUserForEdit";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("NullableIdDtoInt64" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 获取编辑时需要的用户权限
         * @param {EntityDtoInt64} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserGetUserPermissionsForEdit: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appUserGetUserPermissionsForEdit.');
            }
            var localVarPath = "/api/services/app/user/GetUserPermissionsForEdit";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EntityDtoInt64" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 获取用户列表
         * @param {GetUsersInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserGetUsers: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appUserGetUsers.');
            }
            var localVarPath = "/api/services/app/user/GetUsers";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("GetUsersInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 导出用户信息到Excel文件
         * @param {GetUsersInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserGetUsersToExcel: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appUserGetUsersToExcel.');
            }
            var localVarPath = "/api/services/app/user/GetUsersToExcel";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("GetUsersInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 重置用户权限
         * @param {EntityDtoInt64} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserResetUserSpecificPermissions: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appUserResetUserSpecificPermissions.');
            }
            var localVarPath = "/api/services/app/user/ResetUserSpecificPermissions";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EntityDtoInt64" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 切换用户启用禁用状态
         * @param {EntityDtoInt64} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserToggleActiveStatus: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appUserToggleActiveStatus.');
            }
            var localVarPath = "/api/services/app/user/ToggleActiveStatus";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EntityDtoInt64" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 解锁用户
         * @param {EntityDtoInt64} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserUnlockUser: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appUserUnlockUser.');
            }
            var localVarPath = "/api/services/app/user/UnlockUser";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EntityDtoInt64" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 用户修改自己的信息
         * @param {UpdateCurrentUserInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserUpdateCurrentUser: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appUserUpdateCurrentUser.');
            }
            var localVarPath = "/api/services/app/user/UpdateCurrentUser";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("UpdateCurrentUserInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 修改用户权限
         * @param {UpdateUserPermissionsInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserUpdateUserPermissions: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appUserUpdateUserPermissions.');
            }
            var localVarPath = "/api/services/app/user/UpdateUserPermissions";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("UpdateUserPermissionsInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * UserApi - functional programming interface
 * @export
 */
exports.UserApiFp = function (configuration) {
    return {
        /**
         *
         * @summary 批量激活用户
         * @param {BatchActiveUserInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserBatchActiveUser: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.UserApiFetchParamCreator(configuration).appUserBatchActiveUser(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 批量删除用户
         * @param {ArrayDtoInt64} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserBatchDeleteUser: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.UserApiFetchParamCreator(configuration).appUserBatchDeleteUser(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 批量解锁用户
         * @param {ArrayDtoInt64} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserBatchUnlockUser: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.UserApiFetchParamCreator(configuration).appUserBatchUnlockUser(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 创建或编辑用户，Id为空时创建，否则编辑
         * @param {CreateOrUpdateUserInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserCreateOrUpdateUser: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.UserApiFetchParamCreator(configuration).appUserCreateOrUpdateUser(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 删除用户
         * @param {EntityDtoInt64} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserDeleteUser: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.UserApiFetchParamCreator(configuration).appUserDeleteUser(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 获取全部的角色
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserGetRoles: function (X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.UserApiFetchParamCreator(configuration).appUserGetRoles(X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 获取编辑时需要的单个用户信息
         * @param {NullableIdDtoInt64} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserGetUserForEdit: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.UserApiFetchParamCreator(configuration).appUserGetUserForEdit(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 获取编辑时需要的用户权限
         * @param {EntityDtoInt64} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserGetUserPermissionsForEdit: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.UserApiFetchParamCreator(configuration).appUserGetUserPermissionsForEdit(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 获取用户列表
         * @param {GetUsersInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserGetUsers: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.UserApiFetchParamCreator(configuration).appUserGetUsers(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 导出用户信息到Excel文件
         * @param {GetUsersInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserGetUsersToExcel: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.UserApiFetchParamCreator(configuration).appUserGetUsersToExcel(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 重置用户权限
         * @param {EntityDtoInt64} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserResetUserSpecificPermissions: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.UserApiFetchParamCreator(configuration).appUserResetUserSpecificPermissions(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 切换用户启用禁用状态
         * @param {EntityDtoInt64} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserToggleActiveStatus: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.UserApiFetchParamCreator(configuration).appUserToggleActiveStatus(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 解锁用户
         * @param {EntityDtoInt64} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserUnlockUser: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.UserApiFetchParamCreator(configuration).appUserUnlockUser(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 用户修改自己的信息
         * @param {UpdateCurrentUserInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserUpdateCurrentUser: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.UserApiFetchParamCreator(configuration).appUserUpdateCurrentUser(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 修改用户权限
         * @param {UpdateUserPermissionsInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserUpdateUserPermissions: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.UserApiFetchParamCreator(configuration).appUserUpdateUserPermissions(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        }
    };
};
/**
 * UserApi - factory interface
 * @export
 */
exports.UserApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary 批量激活用户
         * @param {BatchActiveUserInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserBatchActiveUser: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.UserApiFp(configuration).appUserBatchActiveUser(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 批量删除用户
         * @param {ArrayDtoInt64} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserBatchDeleteUser: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.UserApiFp(configuration).appUserBatchDeleteUser(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 批量解锁用户
         * @param {ArrayDtoInt64} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserBatchUnlockUser: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.UserApiFp(configuration).appUserBatchUnlockUser(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 创建或编辑用户，Id为空时创建，否则编辑
         * @param {CreateOrUpdateUserInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserCreateOrUpdateUser: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.UserApiFp(configuration).appUserCreateOrUpdateUser(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 删除用户
         * @param {EntityDtoInt64} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserDeleteUser: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.UserApiFp(configuration).appUserDeleteUser(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 获取全部的角色
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserGetRoles: function (X_XSRF_TOKEN, authorization, options) {
            return exports.UserApiFp(configuration).appUserGetRoles(X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 获取编辑时需要的单个用户信息
         * @param {NullableIdDtoInt64} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserGetUserForEdit: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.UserApiFp(configuration).appUserGetUserForEdit(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 获取编辑时需要的用户权限
         * @param {EntityDtoInt64} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserGetUserPermissionsForEdit: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.UserApiFp(configuration).appUserGetUserPermissionsForEdit(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 获取用户列表
         * @param {GetUsersInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserGetUsers: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.UserApiFp(configuration).appUserGetUsers(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 导出用户信息到Excel文件
         * @param {GetUsersInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserGetUsersToExcel: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.UserApiFp(configuration).appUserGetUsersToExcel(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 重置用户权限
         * @param {EntityDtoInt64} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserResetUserSpecificPermissions: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.UserApiFp(configuration).appUserResetUserSpecificPermissions(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 切换用户启用禁用状态
         * @param {EntityDtoInt64} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserToggleActiveStatus: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.UserApiFp(configuration).appUserToggleActiveStatus(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 解锁用户
         * @param {EntityDtoInt64} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserUnlockUser: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.UserApiFp(configuration).appUserUnlockUser(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 用户修改自己的信息
         * @param {UpdateCurrentUserInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserUpdateCurrentUser: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.UserApiFp(configuration).appUserUpdateCurrentUser(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 修改用户权限
         * @param {UpdateUserPermissionsInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserUpdateUserPermissions: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.UserApiFp(configuration).appUserUpdateUserPermissions(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        }
    };
};
/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
var UserApi = /** @class */ (function (_super) {
    __extends(UserApi, _super);
    function UserApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary 批量激活用户
     * @param {BatchActiveUserInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.appUserBatchActiveUser = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.UserApiFp(this.configuration).appUserBatchActiveUser(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 批量删除用户
     * @param {ArrayDtoInt64} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.appUserBatchDeleteUser = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.UserApiFp(this.configuration).appUserBatchDeleteUser(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 批量解锁用户
     * @param {ArrayDtoInt64} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.appUserBatchUnlockUser = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.UserApiFp(this.configuration).appUserBatchUnlockUser(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 创建或编辑用户，Id为空时创建，否则编辑
     * @param {CreateOrUpdateUserInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.appUserCreateOrUpdateUser = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.UserApiFp(this.configuration).appUserCreateOrUpdateUser(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 删除用户
     * @param {EntityDtoInt64} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.appUserDeleteUser = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.UserApiFp(this.configuration).appUserDeleteUser(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 获取全部的角色
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.appUserGetRoles = function (X_XSRF_TOKEN, authorization, options) {
        return exports.UserApiFp(this.configuration).appUserGetRoles(X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 获取编辑时需要的单个用户信息
     * @param {NullableIdDtoInt64} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.appUserGetUserForEdit = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.UserApiFp(this.configuration).appUserGetUserForEdit(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 获取编辑时需要的用户权限
     * @param {EntityDtoInt64} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.appUserGetUserPermissionsForEdit = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.UserApiFp(this.configuration).appUserGetUserPermissionsForEdit(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 获取用户列表
     * @param {GetUsersInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.appUserGetUsers = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.UserApiFp(this.configuration).appUserGetUsers(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 导出用户信息到Excel文件
     * @param {GetUsersInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.appUserGetUsersToExcel = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.UserApiFp(this.configuration).appUserGetUsersToExcel(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 重置用户权限
     * @param {EntityDtoInt64} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.appUserResetUserSpecificPermissions = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.UserApiFp(this.configuration).appUserResetUserSpecificPermissions(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 切换用户启用禁用状态
     * @param {EntityDtoInt64} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.appUserToggleActiveStatus = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.UserApiFp(this.configuration).appUserToggleActiveStatus(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 解锁用户
     * @param {EntityDtoInt64} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.appUserUnlockUser = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.UserApiFp(this.configuration).appUserUnlockUser(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 用户修改自己的信息
     * @param {UpdateCurrentUserInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.appUserUpdateCurrentUser = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.UserApiFp(this.configuration).appUserUpdateCurrentUser(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 修改用户权限
     * @param {UpdateUserPermissionsInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.appUserUpdateUserPermissions = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.UserApiFp(this.configuration).appUserUpdateUserPermissions(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    return UserApi;
}(BaseAPI));
exports.UserApi = UserApi;
/**
 * UserLoginApi - fetch parameter creator
 * @export
 */
exports.UserLoginApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary 获取登录历史
         * @param {GetUserLoginsInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserLoginGetRecentUserLoginAttempts: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appUserLoginGetRecentUserLoginAttempts.');
            }
            var localVarPath = "/api/services/app/userLogin/GetRecentUserLoginAttempts";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("GetUserLoginsInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * UserLoginApi - functional programming interface
 * @export
 */
exports.UserLoginApiFp = function (configuration) {
    return {
        /**
         *
         * @summary 获取登录历史
         * @param {GetUserLoginsInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserLoginGetRecentUserLoginAttempts: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.UserLoginApiFetchParamCreator(configuration).appUserLoginGetRecentUserLoginAttempts(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        }
    };
};
/**
 * UserLoginApi - factory interface
 * @export
 */
exports.UserLoginApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary 获取登录历史
         * @param {GetUserLoginsInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserLoginGetRecentUserLoginAttempts: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.UserLoginApiFp(configuration).appUserLoginGetRecentUserLoginAttempts(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        }
    };
};
/**
 * UserLoginApi - object-oriented interface
 * @export
 * @class UserLoginApi
 * @extends {BaseAPI}
 */
var UserLoginApi = /** @class */ (function (_super) {
    __extends(UserLoginApi, _super);
    function UserLoginApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary 获取登录历史
     * @param {GetUserLoginsInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserLoginApi
     */
    UserLoginApi.prototype.appUserLoginGetRecentUserLoginAttempts = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.UserLoginApiFp(this.configuration).appUserLoginGetRecentUserLoginAttempts(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    return UserLoginApi;
}(BaseAPI));
exports.UserLoginApi = UserLoginApi;
/**
 * XianjinjiaokuandanApi - fetch parameter creator
 * @export
 */
exports.XianjinjiaokuandanApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {CreateXianjinjiaokuandanDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appXianjinjiaokuandanCreate: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appXianjinjiaokuandanCreate.');
            }
            var localVarPath = "/api/services/app/xianjinjiaokuandan/Create";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CreateXianjinjiaokuandanDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {EntityDtoInt32} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appXianjinjiaokuandanDelete: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appXianjinjiaokuandanDelete.');
            }
            var localVarPath = "/api/services/app/xianjinjiaokuandan/Delete";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EntityDtoInt32" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {EntityDtoInt32} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appXianjinjiaokuandanGet: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appXianjinjiaokuandanGet.');
            }
            var localVarPath = "/api/services/app/xianjinjiaokuandan/Get";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EntityDtoInt32" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {PagedSortedAndFilteredInputDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appXianjinjiaokuandanGetAll: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appXianjinjiaokuandanGetAll.');
            }
            var localVarPath = "/api/services/app/xianjinjiaokuandan/GetAll";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("PagedSortedAndFilteredInputDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {UpdateXianjinjiaokuandanDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appXianjinjiaokuandanUpdate: function (input, X_XSRF_TOKEN, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appXianjinjiaokuandanUpdate.');
            }
            var localVarPath = "/api/services/app/xianjinjiaokuandan/Update";
            var localVarUrlObj = url_1["default"].parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("UpdateXianjinjiaokuandanDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url_1["default"].format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * XianjinjiaokuandanApi - functional programming interface
 * @export
 */
exports.XianjinjiaokuandanApiFp = function (configuration) {
    return {
        /**
         *
         * @param {CreateXianjinjiaokuandanDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appXianjinjiaokuandanCreate: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.XianjinjiaokuandanApiFetchParamCreator(configuration).appXianjinjiaokuandanCreate(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {EntityDtoInt32} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appXianjinjiaokuandanDelete: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.XianjinjiaokuandanApiFetchParamCreator(configuration).appXianjinjiaokuandanDelete(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {EntityDtoInt32} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appXianjinjiaokuandanGet: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.XianjinjiaokuandanApiFetchParamCreator(configuration).appXianjinjiaokuandanGet(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {PagedSortedAndFilteredInputDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appXianjinjiaokuandanGetAll: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.XianjinjiaokuandanApiFetchParamCreator(configuration).appXianjinjiaokuandanGetAll(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {UpdateXianjinjiaokuandanDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appXianjinjiaokuandanUpdate: function (input, X_XSRF_TOKEN, authorization, options) {
            var localVarFetchArgs = exports.XianjinjiaokuandanApiFetchParamCreator(configuration).appXianjinjiaokuandanUpdate(input, X_XSRF_TOKEN, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        }
    };
};
/**
 * XianjinjiaokuandanApi - factory interface
 * @export
 */
exports.XianjinjiaokuandanApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @param {CreateXianjinjiaokuandanDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appXianjinjiaokuandanCreate: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.XianjinjiaokuandanApiFp(configuration).appXianjinjiaokuandanCreate(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {EntityDtoInt32} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appXianjinjiaokuandanDelete: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.XianjinjiaokuandanApiFp(configuration).appXianjinjiaokuandanDelete(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {EntityDtoInt32} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appXianjinjiaokuandanGet: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.XianjinjiaokuandanApiFp(configuration).appXianjinjiaokuandanGet(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {PagedSortedAndFilteredInputDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appXianjinjiaokuandanGetAll: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.XianjinjiaokuandanApiFp(configuration).appXianjinjiaokuandanGetAll(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {UpdateXianjinjiaokuandanDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appXianjinjiaokuandanUpdate: function (input, X_XSRF_TOKEN, authorization, options) {
            return exports.XianjinjiaokuandanApiFp(configuration).appXianjinjiaokuandanUpdate(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        }
    };
};
/**
 * XianjinjiaokuandanApi - object-oriented interface
 * @export
 * @class XianjinjiaokuandanApi
 * @extends {BaseAPI}
 */
var XianjinjiaokuandanApi = /** @class */ (function (_super) {
    __extends(XianjinjiaokuandanApi, _super);
    function XianjinjiaokuandanApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {CreateXianjinjiaokuandanDto} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XianjinjiaokuandanApi
     */
    XianjinjiaokuandanApi.prototype.appXianjinjiaokuandanCreate = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.XianjinjiaokuandanApiFp(this.configuration).appXianjinjiaokuandanCreate(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {EntityDtoInt32} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XianjinjiaokuandanApi
     */
    XianjinjiaokuandanApi.prototype.appXianjinjiaokuandanDelete = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.XianjinjiaokuandanApiFp(this.configuration).appXianjinjiaokuandanDelete(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {EntityDtoInt32} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XianjinjiaokuandanApi
     */
    XianjinjiaokuandanApi.prototype.appXianjinjiaokuandanGet = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.XianjinjiaokuandanApiFp(this.configuration).appXianjinjiaokuandanGet(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {PagedSortedAndFilteredInputDto} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XianjinjiaokuandanApi
     */
    XianjinjiaokuandanApi.prototype.appXianjinjiaokuandanGetAll = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.XianjinjiaokuandanApiFp(this.configuration).appXianjinjiaokuandanGetAll(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {UpdateXianjinjiaokuandanDto} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XianjinjiaokuandanApi
     */
    XianjinjiaokuandanApi.prototype.appXianjinjiaokuandanUpdate = function (input, X_XSRF_TOKEN, authorization, options) {
        return exports.XianjinjiaokuandanApiFp(this.configuration).appXianjinjiaokuandanUpdate(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    };
    return XianjinjiaokuandanApi;
}(BaseAPI));
exports.XianjinjiaokuandanApi = XianjinjiaokuandanApi;
